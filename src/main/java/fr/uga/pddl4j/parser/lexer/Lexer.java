/* Lexer.java */
/* Generated By:JavaCC: Do not edit this line. Lexer.java */
package fr.uga.pddl4j.parser.lexer;

import fr.uga.pddl4j.parser.ErrorManager;
import fr.uga.pddl4j.parser.DefaultParsedProblem;
import fr.uga.pddl4j.parser.Connector;
import fr.uga.pddl4j.parser.ParsedDerivedPredicate;
import fr.uga.pddl4j.parser.Parser;
import fr.uga.pddl4j.parser.Expression;
import fr.uga.pddl4j.parser.ParsedDomain;
import fr.uga.pddl4j.parser.ParsedProblem;
import fr.uga.pddl4j.parser.NamedTypedList;
import fr.uga.pddl4j.parser.ParsedAction;
import fr.uga.pddl4j.parser.ParsedMethod;
import fr.uga.pddl4j.parser.RequireKey;
import fr.uga.pddl4j.parser.Symbol;
import fr.uga.pddl4j.parser.ParsedTaskNetwork;
import fr.uga.pddl4j.parser.TimeSpecifier;
import fr.uga.pddl4j.parser.TypedSymbol;
import fr.uga.pddl4j.parser.SymbolType;

import java.io.File;
import java.util.ArrayList;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

public class Lexer implements LexerConstants {

        private static final int PRIMITIVE_TYPE = 0;
        private static final int VARIABLE = 1;
        private static final int CONSTANT = 2;
        private static final int TERM = 3;
        private static final int ATOMIC_FUNCTION_SKELETON = 4;
        private static final int PARSER_DOMAIN = 5;
        private static final int PARSER_PROBLEM = 6;

        private ParsedDomain domain = null;
        public ParsedDomain getDomain() { return this.domain; }

        private ParsedProblem problem = null;
        public ParsedProblem getProblem() { return this.problem; }

    private File file;
        public File getFile() { return this.file; }
        public void setFile(File file) { this.file = file; }

        private ErrorManager mgr;
        public ErrorManager getErrorManager() { return this.mgr; }
        public void setErrorManager(ErrorManager mgr) { this.mgr = mgr; }

        private void error(Throwable e, int line, int column) {
                String message = new String();
                if (e.getClass().equals(TokenMgrError.class)) {
                        String[] tmp = e.getMessage().split(" ");
                        int l = -1;
                        int c = -1;
                        int i = 0;
                        for (i = 0 ; i < tmp.length; i++) {
                                if (tmp[i].equals("line") && i+1 < tmp.length) {
                                        l = Integer.parseInt(tmp[i+1].substring(0, tmp[i+1].length()-1));
                                }
                                if (tmp[i].equals("column") && i+1 < tmp.length) {
                                        c = Integer.parseInt(tmp[i+1].substring(0, tmp[i+1].length()-1));
                                }
                        }
                        message = e.getMessage().split(".  ")[1];
                        this.mgr.logLexicalError(message, this.file, l, c);
                } else if (e.getClass().equals(ParseException.class)) {
                        ParseException pe = (ParseException) e;
                        message = generateErrorMesssage(pe);
                        this.mgr.logLexicalError(message, this.file,
                                pe.currentToken.beginLine, pe.currentToken.beginColumn);
                }
                this.skipToNextBlock();
        }

        public boolean isRequirement(RequireKey key) {
                if (domain != null && this.problem != null) {
                        return this.domain.getRequirements().contains(key)
                        || this.problem.getRequirements().contains(key);
                } else if (domain != null && this.problem == null) {
                        return this.domain.getRequirements().contains(key);
                } else if (problem != null && this.domain == null) {
                        return this.problem.getRequirements().contains(key);
                } else {
                        return false;
                }
        }

        public Set<RequireKey> getRequirements() {
                return this.domain.getRequirements();
        }

        private void skipToNextBlock() {
                Token t1;
                Token t2;
                do {
                        t1 = getNextToken();
                        t2 = getToken(2);
                } while (t1.kind != EOF
                        && t2 != null
                        && t2.kind != REQUIREMENTS
                        && t2.kind != PREDICATES
                        && t2.kind != TYPES
                        && t2.kind != CONSTANTS
                        && t2.kind != FUNCTIONS
                        && t2.kind != ACTION
                        && t2.kind != DURATIVE_ACTION
                        && t2.kind != DERIVED
                        && t2.kind != OBJECTS
                        && t2.kind != INIT
                        && t2.kind != GOAL
                        && t2.kind != METRIC
                        && t2.kind != EOF);
        }

        private String generateErrorMesssage(ParseException pe) {
        StringBuffer expected = new StringBuffer();
        boolean expectedSeq = false;
        int maxSize = 0;
        for (int i = 0; i < pe.expectedTokenSequences.length; i++) {
            if (maxSize < pe.expectedTokenSequences[i].length) {
                maxSize = pe.expectedTokenSequences[i].length;
            }
            for (int j = 0; j < pe.expectedTokenSequences[i].length; j++) {
                expected.append(pe.tokenImage[pe.expectedTokenSequences[i][j]]).append(" ");
                expectedSeq = true;
            }
            if (pe.expectedTokenSequences[i][pe.expectedTokenSequences[i].length - 1] != 0) {
                expected.append("...");
            }
            if (i < pe.expectedTokenSequences.length - 1) {
                expected.append("\n").append("    ");
            }
        }
        String retval = "unexpected token \"" + pe.currentToken.next.image + "\".";
        if (expectedSeq) {
                if (pe.expectedTokenSequences.length == 1) {
                retval += "\nWas expecting:" + "\n" + "    ";
                } else {
                retval += "\nWas expecting one of:" + "\n" + "    ";
                }
                retval += expected.toString();
        }
        return retval;
    }

  final public Token right_bracket() throws ParseException {Token t = null;
    t = jj_consume_token(RIGHT_BRACKET);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Token left_bracket() throws ParseException {Token t = null;
    t = jj_consume_token(LEFT_BRACKET);
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedDomain domain() throws ParseException {Expression<String> exp = null;
        Symbol<String> name = null;
    try {
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(DEFINE);
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(DOMAIN);
      name = domain_name();
this.domain = new DefaultParsedProblem(name);
      right_bracket();
      if (jj_2_1(2)) {
        require_def(Lexer.PARSER_DOMAIN);
      } else {
        ;
      }
      if (jj_2_2(2) && (this.isRequirement(RequireKey.TYPING))) {
        type_def();
      } else {
        ;
      }
      if (jj_2_3(2)) {
        constants_def();
      } else {
        ;
      }
      if (jj_2_4(2)) {
        predicates_def();
      } else {
        ;
      }
      if (jj_2_5(2) && (this.isRequirement(RequireKey.FLUENTS)
                              || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                              || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                              || this.isRequirement(RequireKey.ACTION_COSTS))) {
        functions_def();
      } else {
        ;
      }
      if (jj_2_6(2) && (this.isRequirement(RequireKey.CONSTRAINTS))) {
        pddl_const(Lexer.PARSER_DOMAIN);
      } else {
        ;
      }
      label_1:
      while (true) {
        structure_def();
        if (jj_2_7(1)) {
          ;
        } else {
          break label_1;
        }
      }
      right_bracket();
      jj_consume_token(0);
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
{if ("" != null) return this.domain;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedProblem domain_and_problem() throws ParseException {Expression<String> exp = null;
        Symbol<String> name = null;
    try {
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(DEFINE);
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(DOMAIN);
      name = domain_name();
this.domain = new DefaultParsedProblem(name);
      jj_consume_token(RIGHT_BRACKET);
      if (jj_2_8(2)) {
        require_def(Lexer.PARSER_DOMAIN);
      } else {
        ;
      }
      if (jj_2_9(2) && (this.isRequirement(RequireKey.TYPING))) {
        type_def();
      } else {
        ;
      }
      if (jj_2_10(2)) {
        constants_def();
      } else {
        ;
      }
      if (jj_2_11(2)) {
        predicates_def();
      } else {
        ;
      }
      if (jj_2_12(2) && (this.isRequirement(RequireKey.FLUENTS)
                  || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                  || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                  || this.isRequirement(RequireKey.ACTION_COSTS))) {
        functions_def();
      } else {
        ;
      }
      if (jj_2_13(2) && (this.isRequirement(RequireKey.CONSTRAINTS))) {
        pddl_const(Lexer.PARSER_DOMAIN);
      } else {
        ;
      }
      label_2:
      while (true) {
        structure_def();
        if (jj_2_14(1)) {
          ;
        } else {
          break label_2;
        }
      }
      jj_consume_token(RIGHT_BRACKET);
      problem();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
{if ("" != null) return new DefaultParsedProblem(this.domain, this.problem);}
    throw new Error("Missing return statement in function");
  }

  final public void require_def(int type) throws ParseException {Token t = null;
        Set<RequireKey> requirements = null;
        if (type == Lexer.PARSER_DOMAIN) {
                this.domain.addRequirement(RequireKey.STRIPS);
        }
    try {
      t = left_bracket();
      jj_consume_token(REQUIREMENTS);
      label_3:
      while (true) {
        requirements = require_key();
if (type == Lexer.PARSER_DOMAIN) {
                                        for (RequireKey r : requirements) {
                                                this.domain.addRequirement(r);
                                        }
                                } else {
                                        for (RequireKey r : requirements) {
                                                this.problem.addRequirement(r);
                                        }
                                }
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case STRIPS:
        case TYPING:
        case NEGATIVE_PRECONDITIONS:
        case DISJUNCTIVE_PRECONDITIONS:
        case EQUALITY:
        case EXISTENTIAL_PRECONDITIONS:
        case UNIVERSAL_PRECONDITIONS:
        case QUANTIFIED_PRECONDITIONS:
        case CONDITIONAL_EFFECTS:
        case ACTION_COSTS:
        case FLUENTS:
        case NUMERIC_FLUENTS:
        case OBJECT_FLUENTS:
        case GOAL_UTILITIES:
        case ADL:
        case DURATIVE_ACTIONS:
        case DERIVED_PREDICATES:
        case TIMED_INITIAL_LITERALS:
        case PREFERENCES:
        case CONSTRAINTS:
        case CONTINUS_EFFECTS:
        case DURATION_INEQUALITIES:
        case HIERARCHY:
        case METHOD_PRECONDITIONS:
        case METHOD_CONSTRAINTS:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_3;
        }
      }
      right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public Set<RequireKey> require_key() throws ParseException {Set<RequireKey> requirements = new LinkedHashSet<RequireKey>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case STRIPS:{
      jj_consume_token(STRIPS);
requirements.add(RequireKey.STRIPS);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case TYPING:{
      jj_consume_token(TYPING);
requirements.add(RequireKey.TYPING);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case NEGATIVE_PRECONDITIONS:{
      jj_consume_token(NEGATIVE_PRECONDITIONS);
requirements.add(RequireKey.NEGATIVE_PRECONDITIONS);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case DISJUNCTIVE_PRECONDITIONS:{
      jj_consume_token(DISJUNCTIVE_PRECONDITIONS);
requirements.add(RequireKey.DISJUNCTIVE_PRECONDITIONS);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case EQUALITY:{
      jj_consume_token(EQUALITY);
requirements.add(RequireKey.EQUALITY);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case EXISTENTIAL_PRECONDITIONS:{
      jj_consume_token(EXISTENTIAL_PRECONDITIONS);
requirements.add(RequireKey.EXISTENTIAL_PRECONDITIONS);
                        if (requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)) {
                                requirements.add(RequireKey.QUANTIFIED_PRECONDITIONS);
                        }
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case UNIVERSAL_PRECONDITIONS:{
      jj_consume_token(UNIVERSAL_PRECONDITIONS);
requirements.add(RequireKey.UNIVERSAL_PRECONDITIONS);
                        if (requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)) {
                                requirements.add(RequireKey.QUANTIFIED_PRECONDITIONS);
                        }
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case QUANTIFIED_PRECONDITIONS:{
      jj_consume_token(QUANTIFIED_PRECONDITIONS);
requirements.add(RequireKey.QUANTIFIED_PRECONDITIONS);
                        requirements.add(RequireKey.UNIVERSAL_PRECONDITIONS);
                        requirements.add(RequireKey.EXISTENTIAL_PRECONDITIONS);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case CONDITIONAL_EFFECTS:{
      jj_consume_token(CONDITIONAL_EFFECTS);
requirements.add(RequireKey.CONDITIONAL_EFFECTS);
                        if (requirements.contains(RequireKey.STRIPS)
                                        && requirements.contains(RequireKey.TYPING)
                                        && requirements.contains(RequireKey.NEGATIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EQUALITY)
                                        && requirements.contains(RequireKey.QUANTIFIED_PRECONDITIONS)
                                        && requirements.contains(RequireKey.UNIVERSAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.EXISTENTIAL_PRECONDITIONS)
                                        && requirements.contains(RequireKey.CONDITIONAL_EFFECTS)) {
                                requirements.add(RequireKey.ADL);
                        }
      break;
      }
    case FLUENTS:{
      jj_consume_token(FLUENTS);
requirements.add(RequireKey.FLUENTS);
                        requirements.add(RequireKey.NUMERIC_FLUENTS);
                        requirements.add(RequireKey.OBJECT_FLUENTS);
      break;
      }
    case NUMERIC_FLUENTS:{
      jj_consume_token(NUMERIC_FLUENTS);
requirements.add(RequireKey.NUMERIC_FLUENTS);
                        if (requirements.contains(RequireKey.OBJECT_FLUENTS)) {
                                requirements.add(RequireKey.FLUENTS);
                        }
      break;
      }
    case OBJECT_FLUENTS:{
      jj_consume_token(OBJECT_FLUENTS);
requirements.add(RequireKey.OBJECT_FLUENTS);
                        if (requirements.contains(RequireKey.NUMERIC_FLUENTS)) {
                                requirements.add(RequireKey.FLUENTS);
                        }
      break;
      }
    case GOAL_UTILITIES:{
      jj_consume_token(GOAL_UTILITIES);
requirements.add(RequireKey.GOAL_UTILITIES);
      break;
      }
    case ADL:{
      jj_consume_token(ADL);
requirements.add(RequireKey.ADL);
                        requirements.add(RequireKey.STRIPS);
                        requirements.add(RequireKey.TYPING);
                        requirements.add(RequireKey.NEGATIVE_PRECONDITIONS);
                        requirements.add(RequireKey.DISJUNCTIVE_PRECONDITIONS);
                        requirements.add(RequireKey.EQUALITY);
                        requirements.add(RequireKey.UNIVERSAL_PRECONDITIONS);
                        requirements.add(RequireKey.EXISTENTIAL_PRECONDITIONS);
                        requirements.add(RequireKey.CONDITIONAL_EFFECTS);
      break;
      }
    case ACTION_COSTS:{
      jj_consume_token(ACTION_COSTS);
requirements.add(RequireKey.ACTION_COSTS);
      break;
      }
    case DURATIVE_ACTIONS:{
      jj_consume_token(DURATIVE_ACTIONS);
requirements.add(RequireKey.DURATIVE_ACTIONS);
                        requirements.add(RequireKey.DURATION_INEQUALITIES);
      break;
      }
    case DERIVED_PREDICATES:{
      jj_consume_token(DERIVED_PREDICATES);
requirements.add(RequireKey.DERIVED_PREDICATES);
      break;
      }
    case TIMED_INITIAL_LITERALS:{
      jj_consume_token(TIMED_INITIAL_LITERALS);
requirements.add(RequireKey.TIMED_INITIAL_LITERALS);
      break;
      }
    case PREFERENCES:{
      jj_consume_token(PREFERENCES);
requirements.add(RequireKey.PREFERENCES);
      break;
      }
    case CONSTRAINTS:{
      jj_consume_token(CONSTRAINTS);
requirements.add(RequireKey.CONSTRAINTS);
      break;
      }
    case CONTINUS_EFFECTS:{
      jj_consume_token(CONTINUS_EFFECTS);
requirements.add(RequireKey.CONTINOUS_EFFECTS);
      break;
      }
    case DURATION_INEQUALITIES:{
      jj_consume_token(DURATION_INEQUALITIES);
requirements.add(RequireKey.DURATION_INEQUALITIES);
      break;
      }
    case HIERARCHY:{
      jj_consume_token(HIERARCHY);
// ADD HDDL
                requirements.add(RequireKey.HIERARCHY);
      break;
      }
    case METHOD_PRECONDITIONS:{
      jj_consume_token(METHOD_PRECONDITIONS);
// ADD HDDL
            requirements.add(RequireKey.METHOD_PRECONDITIONS);
      break;
      }
    case METHOD_CONSTRAINTS:{
      jj_consume_token(METHOD_CONSTRAINTS);
// ADD HDDL 2.1
            requirements.add(RequireKey.METHOD_CONSTRAINTS);
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return requirements;}
    throw new Error("Missing return statement in function");
  }

  final public void type_def() throws ParseException {List<TypedSymbol<String>> typedList = null;
    try {
      left_bracket();
      jj_consume_token(TYPES);
      typedList = typed_list(Lexer.PRIMITIVE_TYPE);
      right_bracket();
for (TypedSymbol<String> type : typedList) {
                                this.domain.addType(type);
                        }
                        for (TypedSymbol<String> type : this.domain.getTypes()) {
                                if (type.getTypes().isEmpty()
                                        && !type.equals(Symbol.OBJECT_TYPE)
                                        && !type.equals(Symbol.NUMBER_TYPE)) {
                                        type.addType(Symbol.OBJECT_TYPE);
                                }
                        }
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public List<TypedSymbol<String>> typed_list(int kind) throws ParseException {Symbol<String> t;
        List<Symbol<String>> types = null;
        List<TypedSymbol<String>> typedList = new ArrayList<TypedSymbol<String>>();
        List<Symbol<String>> tmp = new ArrayList<Symbol<String>>();
        List<TypedSymbol<String>> nextTypedList = null;
    if (jj_2_18(2)) {
      left_bracket();
      right_bracket();
    } else if (kind == Lexer.PRIMITIVE_TYPE) {
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NUMBER_TYPE:
        case OBJECT_TYPE:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[2] = jj_gen;
          break label_4;
        }
        t = primitive_type();
tmp.add(t);
      }
      if (jj_2_15(1) && (this.isRequirement(RequireKey.TYPING))) {
        jj_consume_token(SUB);
        types = type();
        nextTypedList = typed_list(kind);
      } else {
        ;
      }
if (types == null) {
                                        types = new ArrayList<Symbol<String>>();
                                }
                                for (Symbol<String> s : tmp) {
                                        TypedSymbol<String> ts = new TypedSymbol<String>(s);
                                        for (Symbol<String> type : types) {
                                                ts.addType(type);
                                        }
                                        typedList.add(ts);
                                }
                                if (nextTypedList != null) {
                                        typedList.addAll(nextTypedList);
                                }
    } else if (kind == Lexer.CONSTANT) {
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:
        case START:
        case END:
        case OVER:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[3] = jj_gen;
          break label_5;
        }
        t = constant();
tmp.add(t);
      }
      if (jj_2_16(1) && (this.isRequirement(RequireKey.TYPING))) {
        jj_consume_token(SUB);
        types = type();
        nextTypedList = typed_list(kind);
      } else {
        ;
      }
if (types == null) {
                                        types = new ArrayList<Symbol<String>>();
                                }
                                for (Symbol<String> s : tmp) {
                                        TypedSymbol<String> ts = new TypedSymbol<String>(s);
                                        for (Symbol<String> type : types) {
                                                ts.addType(type);
                                        }
                                        typedList.add(ts);
                                }
                                if (nextTypedList != null) {
                                        typedList.addAll(nextTypedList);
                                }
    } else if (kind == Lexer.VARIABLE) {
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case VARIABLE_SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[4] = jj_gen;
          break label_6;
        }
        t = variable();
tmp.add(t);
      }
      if (jj_2_17(1) && (this.isRequirement(RequireKey.TYPING))) {
        jj_consume_token(SUB);
        types = type();
        nextTypedList = typed_list(kind);
      } else {
        ;
      }
if (types == null) {
                                        types = new ArrayList<Symbol<String>>();
                                        types.add(Symbol.OBJECT_TYPE);
                                }
                                for (Symbol<String> s : tmp) {
                                        TypedSymbol<String> ts = new TypedSymbol<String>(s);
                                        for (Symbol<String> type : types) {
                                                ts.addType(type);
                                        }
                                        typedList.add(ts);
                                }
                                if (nextTypedList != null) {
                                        typedList.addAll(nextTypedList);
                                }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return typedList;}
    throw new Error("Missing return statement in function");
  }

  final public List<Symbol<String>> type() throws ParseException {Symbol<String> s;
        List<Symbol<String>> type = new ArrayList<Symbol<String>>();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_BRACKET:{
      left_bracket();
      jj_consume_token(EITHER);
      label_7:
      while (true) {
        s = primitive_type();
type.add(s);
        if (jj_2_19(2)) {
          ;
        } else {
          break label_7;
        }
      }
      right_bracket();
      break;
      }
    case NUMBER_TYPE:
    case OBJECT_TYPE:
    case SYMBOL:{
      s = primitive_type();
type.add(s);
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return type;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> primitive_type() throws ParseException {Token t = token;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OBJECT_TYPE:{
      t = jj_consume_token(OBJECT_TYPE);
      break;
      }
    case NUMBER_TYPE:{
      t = jj_consume_token(NUMBER_TYPE);
      break;
      }
    case SYMBOL:{
      t = jj_consume_token(SYMBOL);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Symbol<String>(SymbolType.TYPE, t.image.toLowerCase(),
                t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public void constants_def() throws ParseException {List<TypedSymbol<String>> typedList = null;
    try {
      left_bracket();
      jj_consume_token(CONSTANTS);
      typedList = typed_list(Lexer.CONSTANT);
      right_bracket();
for (TypedSymbol<String> constant : typedList) {
                            if (constant.getTypes().isEmpty()) {
                                constant.addType(Symbol.OBJECT_TYPE);
                            }
                            this.domain.addConstant(constant);
                        }
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public Symbol<String> constant() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      t = jj_consume_token(SYMBOL);
      break;
      }
    case AT:{
      t = jj_consume_token(AT);
      break;
      }
    case END:{
      t = jj_consume_token(END);
      break;
      }
    case START:{
      t = jj_consume_token(START);
      break;
      }
    case OVER:{
      t = jj_consume_token(OVER);
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Symbol<String>(SymbolType.CONSTANT, t.image.toLowerCase(),
            t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public void predicates_def() throws ParseException {NamedTypedList predicate = null;
    try {
      left_bracket();
      jj_consume_token(PREDICATES);
      label_8:
      while (true) {
        predicate = atomic_formula_skeleton();
this.domain.addPredicate(predicate);
        if (jj_2_20(2)) {
          ;
        } else {
          break label_8;
        }
      }
      right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public NamedTypedList comp_task_def() throws ParseException {NamedTypedList taskID;
    jj_consume_token(LEFT_BRACKET);
    jj_consume_token(TASK);
    taskID = task_def();
    jj_consume_token(RIGHT_BRACKET);
{if ("" != null) return taskID;}
    throw new Error("Missing return statement in function");
  }

  final public NamedTypedList task_def() throws ParseException {Symbol<String> name;
    List<TypedSymbol<String>> typedList = null;
    name = task_symbol();
    jj_consume_token(PARAMETERS);
    left_bracket();
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
NamedTypedList l = new NamedTypedList(name);
        for (TypedSymbol<String> s : typedList) {
            l.add(s);
        }
        {if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> task_symbol() throws ParseException {Token t = token;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.TASK, t.image.toLowerCase(),
                 t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public NamedTypedList atomic_formula_skeleton() throws ParseException {Symbol<String> predicate = null;
        List<TypedSymbol<String>> typedList = null;
    jj_consume_token(LEFT_BRACKET);
    predicate = predicate();
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
NamedTypedList l = new NamedTypedList(predicate);
                for (TypedSymbol<String> s : typedList) {
                        l.add(s);
                }
                {if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> predicate() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      t = jj_consume_token(SYMBOL);
      break;
      }
    case AT:{
      t = jj_consume_token(AT);
      break;
      }
    case END:{
      t = jj_consume_token(END);
      break;
      }
    case START:{
      t = jj_consume_token(START);
      break;
      }
    case OVER:{
      t = jj_consume_token(OVER);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Symbol<String>(SymbolType.PREDICATE, t.image.toLowerCase(),
                 t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> variable() throws ParseException {Token t = token;
    t = jj_consume_token(VARIABLE_SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.VARIABLE, t.image.toLowerCase(),
                t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public void functions_def() throws ParseException {List<NamedTypedList> functions = null;
    try {
      left_bracket();
      jj_consume_token(FUNCTIONS);
      functions = function_typed_list(Lexer.ATOMIC_FUNCTION_SKELETON);
      right_bracket();
for (NamedTypedList function: functions) {
                                this.domain.addFunction(function);
                        }
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public NamedTypedList atomic_function_skeleton() throws ParseException {Symbol<String> functor = null;
        List<TypedSymbol<String>> typedList = null;
    jj_consume_token(LEFT_BRACKET);
    functor = functor();
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
NamedTypedList l = new NamedTypedList(functor);
                for (TypedSymbol<String> s : typedList) {
                        l.add(s);
                }
                {if ("" != null) return l;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> functor() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      t = jj_consume_token(SYMBOL);
      break;
      }
    case TOTAL_COST:{
      t = jj_consume_token(TOTAL_COST);
      break;
      }
    case AT:{
      t = jj_consume_token(AT);
      break;
      }
    case END:{
      t = jj_consume_token(END);
      break;
      }
    case START:{
      t = jj_consume_token(START);
      break;
      }
    case OVER:{
      t = jj_consume_token(OVER);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return new Symbol<String>(SymbolType.FUNCTOR, t.image.toLowerCase(),
                t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public List<NamedTypedList> function_typed_list(int type) throws ParseException {NamedTypedList namedTypedList = null;
        List<NamedTypedList> typedListList = new ArrayList<NamedTypedList>();
        List<NamedTypedList> nextNamedTypedList = null;
        List<Symbol<String>> typeList = null;
    label_9:
    while (true) {
      if (jj_2_21(2)) {
        ;
      } else {
        break label_9;
      }
      namedTypedList = atomic_function_skeleton();
typedListList.add(namedTypedList);
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUB:{
      jj_consume_token(SUB);
      typeList = function_type();
for (Symbol<String> t : typeList) {
                                namedTypedList.addType(t);
                        }
      nextNamedTypedList = function_typed_list(type);
typedListList.addAll(nextNamedTypedList);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
// To keep compatibility with PDDL 3.0: if no type is set it is number
                for (NamedTypedList ntl : typedListList) {
                        if (ntl.getTypes().isEmpty()) {
                                ntl.addType(Symbol.NUMBER_TYPE);
                        }
                }
                {if ("" != null) return typedListList;}
    throw new Error("Missing return statement in function");
  }

  final public List<Symbol<String>> function_type() throws ParseException {Token t;
        Symbol<String> symbol;
        List<Symbol<String>> typesList = new ArrayList<Symbol<String>>();
    if (jj_2_22(2) && (this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                            || this.isRequirement(RequireKey.FLUENTS)
                            || this.isRequirement(RequireKey.ACTION_COSTS))) {
      t = jj_consume_token(NUMBER_TYPE);
typesList.add(new Symbol<String>(SymbolType.TYPE, t.image.toLowerCase(),
                            t.beginLine, t.beginColumn, t.endLine, t.endColumn));
                        {if ("" != null) return typesList;}
    } else if (jj_2_23(2) && ((this.isRequirement(RequireKey.TYPING) && this.isRequirement(RequireKey.OBJECT_FLUENTS))
                                        || this.isRequirement(RequireKey.FLUENTS))) {
      typesList = type();
{if ("" != null) return typesList;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> con_gd() throws ParseException {Expression<String> exp = null;
    if (jj_2_24(2)) {
      exp = and_con_gd();
    } else if (jj_2_25(2)) {
      exp = forall_con_gd();
    } else if (jj_2_26(2)) {
      exp = at_end_con_gd();
    } else if (jj_2_27(2)) {
      exp = always_con_gd();
    } else if (jj_2_28(2)) {
      exp = sometime_con_gd();
    } else if (jj_2_29(2)) {
      exp = within_con_gd();
    } else if (jj_2_30(2)) {
      exp = at_most_once_con_gd();
    } else if (jj_2_31(2)) {
      exp = sometime_after_con_gd();
    } else if (jj_2_32(2)) {
      exp = sometime_before_con_gd();
    } else if (jj_2_33(2)) {
      exp = always_within_con_gd();
    } else if (jj_2_34(2)) {
      exp = hold_during_con_gd();
    } else if (jj_2_35(2)) {
      exp = hold_after_con_gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.AND);
        Expression<String> child = null;
        Token begin = null;
        Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_10:
    while (true) {
      if (jj_2_36(2)) {
        ;
      } else {
        break label_10;
      }
      child = con_gd();
conGD.addChild(child);
    }
    end = jj_consume_token(RIGHT_BRACKET);
conGD.setBegin(begin);
                conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.FORALL);
        Expression<String> child = null;
        List<TypedSymbol<String>> typedList = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    child = con_gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.setQuantifiedVariables(typedList);
                conGD.addChild(child);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.AT_END);
        Expression<String> exp = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> always_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.ALWAYS_CONSTRAINT);
        Expression<String> exp = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ALWAYS);
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> sometime_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.SOMETIME_CONSTRAINT);
        Expression<String> exp = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SOMETIME);
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> within_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.WITHIN_CONSTRAINT);
        Expression<String> exp, time;
    Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(WITHIN);
    time = number();
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(time);
                conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_most_once_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.AT_MOST_ONCE_CONSTRAINT);
        Expression<String> exp;
    Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT_MOST_ONCE);
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> sometime_after_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.SOMETIME_AFTER_CONSTRAINT);
        Expression<String> gd1 = null;
        Expression<String> gd2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SOMETIME_AFTER);
    gd1 = gd();
    gd2 = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(gd1);
                conGD.addChild(gd2);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> sometime_before_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.SOMETIME_BEFORE_CONSTRAINT);
        Expression<String> gd1 = null;
        Expression<String> gd2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SOMETIME_BEFORE);
    gd1 = gd();
    gd2 = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(gd1);
                conGD.addChild(gd2);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> always_within_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.ALWAYS_WITHIN_CONSTRAINT);
        Expression<String> gd1, gd2, time;
    Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ALWAYS_WITHIN);
    time = number();
    gd1 = gd();
    gd2 = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(time);
                conGD.addChild(gd1);
                conGD.addChild(gd2);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> hold_during_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.HOLD_DURING_CONSTRAINT);
        Expression<String> exp, lower, upper;
    Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(HOLD_DURING);
    lower = number();
    upper = number();
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(lower);
                conGD.addChild(upper);
                conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> hold_after_con_gd() throws ParseException {Expression<String> conGD = new Expression<String>(Connector.HOLD_AFTER_CONSTRAINT);
        Expression<String> exp, time;
    Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(HOLD_AFTER);
    time = number();
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
conGD.addChild(time);
                conGD.addChild(exp);
                conGD.setBegin(begin);
        conGD.setEnd(end);
                {if ("" != null) return conGD;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> gd() throws ParseException {Expression<String> exp = null;
    if (jj_2_37(2)) {
      exp = atomic_formula(Lexer.TERM);
    } else if (jj_2_38(2)) {
      exp = and_gd();
    } else if (jj_2_39(2) && (this.isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS))) {
      exp = or_gd();
    } else if (jj_2_40(2) && (this.isRequirement(RequireKey.NEGATIVE_PRECONDITIONS))) {
      exp = not_gd();
    } else if (jj_2_41(2) && (this.isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                    && this.isRequirement(RequireKey.NEGATIVE_PRECONDITIONS))) {
      exp = imply_gd();
    } else if (jj_2_42(2) && (this.isRequirement(RequireKey.EXISTENTIAL_PRECONDITIONS))) {
      exp = exists_gd();
    } else if (jj_2_43(2) && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS))) {
      exp = forall_gd();
    } else if (jj_2_44(3) && (this.isRequirement(RequireKey.EQUALITY))) {
      exp = equal_gd();
    } else if (jj_2_45(2) && (this.isRequirement(RequireKey.FLUENTS)
                            || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                            || this.isRequirement(RequireKey.OBJECT_FLUENTS))) {
      exp = f_comp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_gd() throws ParseException {Expression<String> exp = null;
    if (jj_2_46(2)) {
      exp = not_equal_atomic_formula();
    } else if (jj_2_47(2)) {
      exp = equal_atomic_formula();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> not_equal_atomic_formula() throws ParseException {Expression<String> exp = new Expression<String>(Connector.NOT);
        Expression<String> c = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(NOT);
    c = equal_gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(c);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_atomic_formula() throws ParseException {Expression<String> exp = new Expression<String>(Connector.EQUAL_ATOM);
        List<Symbol<String>> args = new ArrayList<Symbol<String>>();
        Token t = null;
        Symbol<String> arg1 = null;
        Symbol<String> arg2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    t = jj_consume_token(EQUAL);
    arg1 = term();
    arg2 = term();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setSymbol(new Symbol<String>(SymbolType.FUNCTOR, t.image.toLowerCase(),
            t.beginLine, t.beginColumn, t.endLine, t.endColumn));
                args.add(arg1);
                args.add(arg2);
                exp.setArguments(args);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> s = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_11:
    while (true) {
      if (jj_2_48(2)) {
        ;
      } else {
        break label_11;
      }
      s = gd();
exp.addChild(s);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> or_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.OR);
        Expression<String> s = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(OR);
    label_12:
    while (true) {
      if (jj_2_49(2)) {
        ;
      } else {
        break label_12;
      }
      s = gd();
exp.addChild(s);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> not_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.NOT);
        Expression<String> s = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(NOT);
    s = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(s);
        exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> imply_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.IMPLY);
        Expression<String> p = null;
        Expression<String> q = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(IMPLY);
    p = gd();
    q = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(p);
                exp.addChild(q);
        exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> exists_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.EXISTS);
        List<TypedSymbol<String>> typedList = null;
        Expression<String> s = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(EXISTS);
    jj_consume_token(LEFT_BRACKET);
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    s = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(typedList);
                exp.addChild(s);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FORALL);
        List<TypedSymbol<String>> typedList = null;
        Expression<String> s = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    s = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(typedList);
                exp.addChild(s);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> atomic_formula(int type) throws ParseException {Expression<String> exp = new Expression<String>(Connector.ATOM);
        List<Symbol<String>> args = new ArrayList<Symbol<String>>();
        Symbol<String> t = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    t = predicate();
exp.setSymbol(t);
    if (type == Lexer.CONSTANT) {
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:
        case START:
        case END:
        case OVER:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[11] = jj_gen;
          break label_13;
        }
        t = constant();
args.add(t);
      }
    } else if (type == Lexer.TERM) {
      label_14:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:
        case START:
        case END:
        case OVER:
        case VARIABLE_SYMBOL:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[12] = jj_gen;
          break label_14;
        }
        t = term();
args.add(t);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setArguments(args);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> term() throws ParseException {Symbol<String> t = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AT:
    case START:
    case END:
    case OVER:
    case SYMBOL:{
      t = constant();
      break;
      }
    case VARIABLE_SYMBOL:{
      t = variable();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return t;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> literal(int type) throws ParseException {Expression<String> exp = null;
    if (jj_2_50(2)) {
      exp = atomic_formula(type);
    } else if (jj_2_51(2)) {
      exp = not_atomic_formula(type);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> not_atomic_formula(int type) throws ParseException {Expression<String> exp = new Expression<String>(Connector.NOT);
        Expression<String> s = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(NOT);
    s = atomic_formula(type);
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(s);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_comp() throws ParseException {Expression<String> exp = null;
    exp = binary_comp();
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> binary_comp() throws ParseException {Expression<String> exp = null;
    if (jj_2_52(2)) {
      exp = greater_comp();
    } else if (jj_2_53(2)) {
      exp = less_comp();
    } else if (jj_2_54(2)) {
      exp = greater_equal_comp();
    } else if (jj_2_55(2)) {
      exp = less_equal_comp();
    } else if (jj_2_56(2)) {
      exp = equal_comp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> greater_comp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_COMPARISON);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GREAT);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> greater_equal_comp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_OR_EQUAL_COMPARISON);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GEQUAL);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_equal_comp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_OR_EQUAL_COMPARISON);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LEQUAL);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_comp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_COMPARISON);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LESS);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
        exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_comp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.EQUAL_COMPARISON);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(EQUAL);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_exp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.F_EXP);
        Expression<String> child = null;
    Token begin = null;
    Token end = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUMBER:{
      child = number();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      if (jj_2_57(2)) {
        child = op();
      } else if (jj_2_58(2)) {
        child = f_head();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
exp.addChild(child);
                exp.setLocation(child.getLocation());
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> number() throws ParseException {Token t = null;
    t = jj_consume_token(NUMBER);
Expression<String> exp = new Expression<String>(Connector.NUMBER);
                exp.setValue(Double.parseDouble(t.image));
                exp.setBegin(t);
        exp.setEnd(t);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> op() throws ParseException {Expression<String> exp = null;
    if (jj_2_59(2)) {
      exp = binary_operation();
    } else if (jj_2_60(2)) {
      exp = unary_op();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> binary_operation() throws ParseException {Expression<String> exp = null;
    if (jj_2_61(2)) {
      exp = add_op();
    } else if (jj_2_62(2)) {
      exp = substract_op();
    } else if (jj_2_63(2)) {
      exp = multiply_op();
    } else if (jj_2_64(2)) {
      exp = divide_op();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> add_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.PLUS);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ADD);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> substract_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MINUS);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SUB);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> multiply_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MULTIPLICATION);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(MUL);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> divide_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.DIVISION);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(DIV);
    op1 = f_exp();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> unary_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.UMINUS);
        Expression<String> op1 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SUB);
    op1 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_head() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FN_HEAD);
        List<Symbol<String>> args = new ArrayList<Symbol<String>>();
        Symbol<String> s = null;
    Token begin = null;
    Token end = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_BRACKET:{
      begin = jj_consume_token(LEFT_BRACKET);
      s = functor();
exp.setSymbol(s);
      label_15:
      while (true) {
        if (jj_2_65(2)) {
          ;
        } else {
          break label_15;
        }
        s = term();
args.add(s);
      }
      end = jj_consume_token(RIGHT_BRACKET);
exp.setArguments(args);
            exp.setBegin(begin);
            exp.setEnd(end);
        {if ("" != null) return exp;}
      break;
      }
    case AT:
    case START:
    case END:
    case OVER:
    case TOTAL_COST:
    case SYMBOL:{
      s = functor();
exp.setSymbol(s);
                exp.setArguments(args);
        exp.setLocation(s.getLocation());
                {if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void structure_def() throws ParseException {ParsedAction op = null;
        ParsedMethod meth = null;
        ParsedDerivedPredicate dp = null;
        NamedTypedList task = null;
    if (jj_2_66(2)) {
      op = action_def();
this.domain.addAction(op);
    } else if (jj_2_67(2) && (this.isRequirement(RequireKey.DURATIVE_ACTIONS))) {
      op = durative_action_def();
this.domain.addAction(op);
    } else if (jj_2_68(2) && (this.isRequirement(RequireKey.DERIVED_PREDICATES))) {
      dp = derived_def();
this.domain.addDerivedPredicate(dp);
    } else if (jj_2_69(2) && (this.isRequirement(RequireKey.HIERARCHY))) {
      // ADD HDDL
                  op = htn_action_def();
this.domain.addAction(op);
    } else if (jj_2_70(2) && (this.isRequirement(RequireKey.HIERARCHY))) {
      // ADD HDDL
                  task = comp_task_def();
this.domain.addTask(task);
    } else if (jj_2_71(2) && (this.isRequirement(RequireKey.HIERARCHY))) {
      // ADD HDDL
                  meth = method_def();
this.domain.addMethod(meth);
    } else if (jj_2_72(2) && (this.isRequirement(RequireKey.DURATIVE_ACTIONS) // ADD HDDL2.1
                    && this.isRequirement(RequireKey.HIERARCHY))) {
      meth = durative_method_def();
this.domain.addMethod(meth);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public ParsedMethod method_def() throws ParseException {Symbol<String> name = null;
        List<TypedSymbol<String>> parameters = null;
        Expression<String> taskID = null;
        Expression<String> precondition = new Expression<String>(Connector.AND);
        ParsedTaskNetwork tn = null;
        Token begin = null;
    Token end = null;
    try {
      begin = left_bracket();
      jj_consume_token(METHOD);
      name = method_name();
      jj_consume_token(PARAMETERS);
      jj_consume_token(LEFT_BRACKET);
      parameters = typed_list(Lexer.VARIABLE);
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(TASK);
      taskID = task_formula(Lexer.TERM);
      if (jj_2_73(2) && (this.isRequirement(RequireKey.METHOD_PRECONDITIONS))) {
        jj_consume_token(PRECONDITION);
        precondition = pre_gd();
      } else {
        ;
      }
      tn = task_network();
      end = right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
ParsedMethod m = new ParsedMethod(name, parameters, taskID, precondition, tn);
                m.setBegin(begin);
        m.setEnd(end);
        {if ("" != null) return m;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedMethod durative_method_def() throws ParseException {Symbol<String> name = null;
        List<TypedSymbol<String>> parameters = null;
        Expression<String> taskID = null;
        Expression<String> duration = null;
        Expression<String> condition = new Expression<String>(Connector.AND);
        ParsedTaskNetwork tn = null;
        Token begin = null;
    Token end = null;
    try {
      begin = left_bracket();
      jj_consume_token(DURATIVE_METHOD);
      name = method_name();
      jj_consume_token(PARAMETERS);
      jj_consume_token(LEFT_BRACKET);
      parameters = typed_list(Lexer.VARIABLE);
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(TASK);
      taskID = task_formula(Lexer.TERM);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DURATION:{
        jj_consume_token(DURATION);
        duration = method_duration_constraint();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        ;
      }
      if (jj_2_74(2) && (this.isRequirement(RequireKey.METHOD_PRECONDITIONS))) {
        jj_consume_token(CONDITION);
        condition = da_gd();
      } else {
        ;
      }
      tn = durative_task_network();
      end = right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
ParsedMethod m = new ParsedMethod(name, parameters, taskID, duration, condition, tn);
        m.setBegin(begin);
        m.setEnd(end);
        {if ("" != null) return m;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedTaskNetwork task_network() throws ParseException {Expression<String> tasks = null;
    Expression<String> ordering = new Expression<String>(Connector.AND);
    Expression<String> constraints = new Expression<String>(Connector.AND);
    ParsedTaskNetwork tn = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TASKS:
    case SUBTASKS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TASKS:{
        jj_consume_token(TASKS);
        break;
        }
      case SUBTASKS:{
        jj_consume_token(SUBTASKS);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tasks = subtask_def();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDERING:{
        jj_consume_token(ORDERING);
        ordering = htn_ordering_constraints_def();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTRAINTS:{
        jj_consume_token(CONSTRAINTS);
        constraints = htn_constraints_def();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        ;
      }
{if ("" != null) return new ParsedTaskNetwork(tasks, ordering, constraints, false, false);}
      break;
      }
    case ORDERED_SUBTASKS:
    case ORDERED_TASKS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDERED_TASKS:{
        jj_consume_token(ORDERED_TASKS);
        break;
        }
      case ORDERED_SUBTASKS:{
        jj_consume_token(ORDERED_SUBTASKS);
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tasks = subtask_def();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTRAINTS:{
        jj_consume_token(CONSTRAINTS);
        constraints = htn_constraints_def();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        ;
      }
{if ("" != null) return new ParsedTaskNetwork(tasks, ordering, constraints, true, false);}
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ParsedTaskNetwork durative_task_network() throws ParseException {Expression<String> tasks = null;
    Expression<String> ordering = new Expression<String>(Connector.AND);
    Expression<String> constraints = new Expression<String>(Connector.AND);
    ParsedTaskNetwork tn = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TASKS:
    case SUBTASKS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TASKS:{
        jj_consume_token(TASKS);
        break;
        }
      case SUBTASKS:{
        jj_consume_token(SUBTASKS);
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tasks = subtask_def();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDERING:{
        jj_consume_token(ORDERING);
        ordering = durative_htn_ordering_constraints_def();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTRAINTS:{
        jj_consume_token(CONSTRAINTS);
        constraints = htn_constraints_def();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
{if ("" != null) return new ParsedTaskNetwork(tasks, ordering, constraints, false, true);}
      break;
      }
    case ORDERED_SUBTASKS:
    case ORDERED_TASKS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ORDERED_TASKS:{
        jj_consume_token(ORDERED_TASKS);
        break;
        }
      case ORDERED_SUBTASKS:{
        jj_consume_token(ORDERED_SUBTASKS);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      tasks = subtask_def();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CONSTRAINTS:{
        jj_consume_token(CONSTRAINTS);
        constraints = htn_constraints_def();
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        ;
      }
{if ("" != null) return new ParsedTaskNetwork(tasks, ordering, constraints, true, true);}
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> method_name() throws ParseException {Token t = token;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.ACTION, t.image.toLowerCase(),
                    t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> subtask_def() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
    Expression<String> taskID = null;
    Token begin;
    Token end;
    if (jj_2_75(2)) {
      taskID = subtask();
exp = new Expression<String>(Connector.AND);
                exp.addChild(taskID);
                exp.setLocation(taskID.getLocation());
    } else if (jj_2_76(2)) {
      exp = and_subtask();
    } else if (jj_2_77(3)) {
      begin = jj_consume_token(LEFT_BRACKET);
      end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_subtask() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
    Expression<String> task = null;
    int i = 0;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_16:
    while (true) {
      if (jj_2_78(2)) {
        ;
      } else {
        break label_16;
      }
      task = subtask();
exp.addChild(task);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> subtask() throws ParseException {Symbol<String> taskID;
    Expression<String> task;
    Token begin = null;
    Token end = null;
    if (jj_2_79(3)) {
      begin = jj_consume_token(LEFT_BRACKET);
      taskID = task_id_symbol();
      task = task_formula(Lexer.TERM);
      end = jj_consume_token(RIGHT_BRACKET);
task.setTaskID(taskID);
                task.setBegin(begin);
                task.setEnd(end);
    } else if (jj_2_80(2)) {
      task = task_formula(Lexer.TERM);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return task;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> task_formula(int type) throws ParseException {Expression<String> exp = new Expression<String>(Connector.TASK);
        List<Symbol<String>> args = new ArrayList<Symbol<String>>();
        Symbol<String> t = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    t = task_symbol();
exp.setSymbol(t);
    if (type == Lexer.CONSTANT) {
      label_17:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:
        case START:
        case END:
        case OVER:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[29] = jj_gen;
          break label_17;
        }
        t = constant();
args.add(t);
      }
    } else if (type == Lexer.TERM) {
      label_18:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case AT:
        case START:
        case END:
        case OVER:
        case VARIABLE_SYMBOL:
        case SYMBOL:{
          ;
          break;
          }
        default:
          jj_la1[30] = jj_gen;
          break label_18;
        }
        t = term();
args.add(t);
      }
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setArguments(args);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> htn_ordering_constraints_def() throws ParseException {Expression<String> exp = null;
    Expression<String> taskID = null;
    if (jj_2_81(2)) {
      exp = empty_and();
    } else if (jj_2_82(2)) {
      taskID = htn_ordering_constraint();
exp = new Expression<String>(Connector.AND);
                exp.addChild(taskID);
                exp.setLocation(taskID.getLocation());
    } else if (jj_2_83(2)) {
      exp = and_ordering_constraints();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> durative_htn_ordering_constraints_def() throws ParseException {Expression<String> exp = null;
    Expression<String> ordering = null;
    if (jj_2_84(3)) {
      exp = empty_and();
    } else if (jj_2_85(2)) {
      ordering = durative_htn_ordering_constraint();
exp = new Expression<String>(Connector.AND);
                exp.addChild(ordering);
                exp.setLocation(ordering.getLocation());
    } else if (jj_2_86(3)) {
      exp = durative_and_ordering_constraints();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_ordering_constraints() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
    Expression<String> ordering = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_19:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_BRACKET:{
        ;
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        break label_19;
      }
      ordering = htn_ordering_constraint();
exp.addChild(ordering);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> durative_and_ordering_constraints() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
    Expression<String> ordering = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_20:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_BRACKET:{
        ;
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        break label_20;
      }
      ordering = durative_htn_ordering_constraint();
exp.addChild(ordering);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> htn_ordering_constraint() throws ParseException {Expression<String> exp = null;
    exp = less_htn_ordering_constraint();
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> durative_htn_ordering_constraint() throws ParseException {Expression<String> exp = null;
    if (jj_2_87(3)) {
      // ADD HDDL2.1
                  exp = less_htn_ordering_constraint();
    } else if (jj_2_88(3)) {
      // ADD HDDL2.1
                  exp = equal_htn_temporal_ordering_constraint();
    } else if (jj_2_89(3)) {
      // ADD HDDL2.1
                  exp = less_htn_temporal_ordering_constraint();
    } else if (jj_2_90(3)) {
      // ADD HDDL2.1
                  exp = less_or_equal_htn_temporal_ordering_constraint();
    } else if (jj_2_91(3)) {
      // ADD HDDL2.1
                  exp = great_htn_temporal_ordering_constraint();
    } else if (jj_2_92(3)) {
      // ADD HDDL2.1
                  exp = great_or_equal_htn_temporal_ordering_constraint();
    } else if (jj_2_93(3)) {
      // ADD HDDL2.1
                      exp = not_equal_htn_temporal_ordering_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_htn_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_ORDERING_CONSTRAINT);
    Expression<String> id1 = null;
    Expression<String> id2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LESS);
    id1 = task_id();
    id2 = task_id();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_htn_temporal_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.EQUAL_ORDERING_CONSTRAINT);
    Expression<String> id1 = null;
    Expression<String> id2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(EQUAL);
    id1 = timed_task_id();
    id2 = timed_task_id();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_htn_temporal_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_ORDERING_CONSTRAINT);
    Expression<String> id1 = null;
    Expression<String> id2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LESS);
    id1 = timed_task_id();
    id2 = timed_task_id();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_or_equal_htn_temporal_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_OR_EQUAL_ORDERING_CONSTRAINT);
     Expression<String> id1 = null;
     Expression<String> id2 = null;
     Token begin = null;
     Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LEQUAL);
    id1 = timed_task_id();
    id2 = timed_task_id();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> great_htn_temporal_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_ORDERING_CONSTRAINT);
     List<Symbol<String>> tasks = new ArrayList<Symbol<String>>();
     Expression<String> id1 = null;
     Expression<String> id2 = null;
     Token begin = null;
     Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GREAT);
    id1 = timed_task_id();
    id2 = timed_task_id();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> great_or_equal_htn_temporal_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_OR_EQUAL_ORDERING_CONSTRAINT);
    Expression<String> id1 = null;
    Expression<String> id2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GEQUAL);
    id1 = timed_task_id();
    id2 = timed_task_id();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> not_equal_htn_temporal_ordering_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.NOT);
    Expression<String> equal = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(NOT);
    equal = equal_htn_temporal_ordering_constraint();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(equal);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> task_id_symbol() throws ParseException {Token t = token;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.TASK_ID, t.image.toLowerCase(),
                 t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> task_id() throws ParseException {Expression<String> exp = null;
        Symbol<String> id = null;
    id = task_id_symbol();
exp = new Expression<String>(Connector.TASK_ID);
                exp.setTaskID(id);
            {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> timed_task_id() throws ParseException {Expression<String> exp = null;
    if (jj_2_94(2)) {
      exp = start_task_id();
    } else if (jj_2_95(2)) {
      exp = end_task_id();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> start_task_id() throws ParseException {Symbol<String> id = null;
    Expression<String> exp = new Expression<String>(Connector.TIMED_TASK_ID);
    jj_consume_token(LEFT_BRACKET);
    jj_consume_token(START);
    id = task_id_symbol();
    jj_consume_token(RIGHT_BRACKET);
exp.setTaskID(id);
        exp.setTimeSpecifier(TimeSpecifier.START);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> end_task_id() throws ParseException {Symbol<String> id = null;
    Expression<String> exp = new Expression<String>(Connector.TIMED_TASK_ID);
    jj_consume_token(LEFT_BRACKET);
    jj_consume_token(END);
    id = task_id_symbol();
    jj_consume_token(RIGHT_BRACKET);
exp.setTaskID(id);
        exp.setTimeSpecifier(TimeSpecifier.END);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> htn_constraints_def() throws ParseException {Expression<String> exp = null;
    Expression<String> c = null;
    if (jj_2_96(2)) {
      exp = empty_and();
    } else if (jj_2_97(2)) {
      c = htn_constraint();
exp = new Expression<String>(Connector.AND);
                exp.addChild(c);
                exp.setLocation(c.getLocation());
    } else if (jj_2_98(2)) {
      exp = and_htn_constraints();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_htn_constraints() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
    Expression<String> c = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_21:
    while (true) {
      c = htn_constraint();
exp.addChild(c);
      if (jj_2_99(1)) {
        ;
      } else {
        break label_21;
      }
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> htn_constraint() throws ParseException {Expression<String> exp = null;
    if (jj_2_100(2)) {
      exp = equal_atomic_formula();
    } else if (jj_2_101(2)) {
      exp = not_equal_atomic_formula();
    } else if (jj_2_102(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = hold_before_htn_constraint();
    } else if (jj_2_103(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = hold_after_htn_constraint();
    } else if (jj_2_104(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = hold_between_htn_constraint();
    } else if (jj_2_105(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = hold_during_htn_constraint();
    } else if (jj_2_106(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = at_end_htn_constraint();
    } else if (jj_2_107(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = at_start_htn_constraint();
    } else if (jj_2_108(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = always_htn_constraint();
    } else if (jj_2_109(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = at_most_one_htn_constraint();
    } else if (jj_2_110(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = sometime_htn_constraint();
    } else if (jj_2_111(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = sometime_before_htn_constraint();
    } else if (jj_2_112(2) && (this.isRequirement(RequireKey.METHOD_CONSTRAINTS))) {
      // ADD HDDL2.1
                  exp = sometime_after_htn_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> hold_before_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.HOLD_BEFORE_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(HOLD_BEFORE);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> hold_after_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.HOLD_AFTER_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> effect = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(HOLD_AFTER);
    id = task_id();
    effect = effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(effect);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> hold_between_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.HOLD_BETWEEN_METHOD_CONSTRAINT);
    Expression<String> id1 = null;
    Expression<String> id2 = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(HOLD_BETWEEN);
    id1 = task_id();
    id2 = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
    exp.addChild(id2);
    exp.addChild(gd);
    exp.setBegin(begin);
    exp.setEnd(end);
    {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> hold_during_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.HOLD_DURING_METHOD_CONSTRAINT);
    Expression<String> id1 = null;
    Expression<String> id2 = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(HOLD_DURING);
    id1 = task_id();
    id2 = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id1);
        exp.addChild(id2);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_END_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> effect = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    id = task_id();
    effect = effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(effect);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_start_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_START_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(START);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> always_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.ALWAYS_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ALWAYS);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_most_one_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_MOST_ONCE_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT_MOST_ONCE);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> sometime_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SOMETIME_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SOMETIME);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> sometime_before_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SOMETIME_BEFORE_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SOMETIME_BEFORE);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> sometime_after_htn_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SOMETIME_AFTER_METHOD_CONSTRAINT);
    Expression<String> id = null;
    Expression<String> gd = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SOMETIME_AFTER);
    id = task_id();
    gd = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(id);
        exp.addChild(gd);
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedDerivedPredicate derived_def() throws ParseException {NamedTypedList head = null;
        Expression<String> body = null;
        Token begin = null;
        Token end = null;
    try {
      left_bracket();
      jj_consume_token(DERIVED);
      head = atomic_formula_skeleton();
      body = gd();
      right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
ParsedDerivedPredicate axiom = new ParsedDerivedPredicate(head, body);
                axiom.setBegin(begin);
                axiom.setEnd(end);
                {if ("" != null) return axiom;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedAction action_def() throws ParseException {Symbol<String> name = null;
        List<TypedSymbol<String>> parameters = null;
        Expression<String> preconds = new Expression<String>(Connector.AND);
        Expression<String> effects = new Expression<String>(Connector.AND);
        Token begin = null;
        Token end = null;
    try {
      begin = left_bracket();
      jj_consume_token(ACTION);
      name = action_name();
      jj_consume_token(PARAMETERS);
      jj_consume_token(LEFT_BRACKET);
      parameters = typed_list(Lexer.VARIABLE);
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(PRECONDITION);
      preconds = pre_gd();
      jj_consume_token(EFFECT);
      effects = effect();
      end = right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
ParsedAction a = new ParsedAction(name, parameters, preconds, effects);
                a.setBegin(begin);
                a.setEnd(end);
                {if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedAction htn_action_def() throws ParseException {Symbol<String> name = null;
        List<TypedSymbol<String>> parameters = null;
        Expression<String> preconds = new Expression<String>(Connector.AND);
        Expression<String> effects = new Expression<String>(Connector.AND);
    Token begin = null;
    Token end = null;
    try {
      begin = left_bracket();
      jj_consume_token(ACTION);
      name = action_name();
      jj_consume_token(PARAMETERS);
      jj_consume_token(LEFT_BRACKET);
      parameters = typed_list(Lexer.VARIABLE);
      jj_consume_token(RIGHT_BRACKET);
      if (jj_2_113(2)) {
        jj_consume_token(PRECONDITION);
        preconds = pre_gd();
      } else {
        ;
      }
      if (jj_2_114(2)) {
        jj_consume_token(EFFECT);
        effects = effect();
      } else {
        ;
      }
      end = right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
ParsedAction a =  new ParsedAction(name, parameters, preconds, effects);
                a.setBegin(begin);
        a.setEnd(end);
        {if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> action_name() throws ParseException {Token t = token;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.ACTION, t.image.toLowerCase(),
                    t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> pre_gd() throws ParseException {Expression<String> exp = null;
    if (jj_2_115(3) && (this.isRequirement(RequireKey.PREFERENCES))) {
      exp = pref_gd();
    } else if (jj_2_116(2)) {
      exp = and_pre_gd();
    } else if (jj_2_117(2) && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS))) {
      exp = forall_pre_gd();
    } else if (jj_2_118(2)) {
      exp = empty_or();
    } else if (jj_2_119(2)) {
      exp = gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> empty_or() throws ParseException {Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    end = jj_consume_token(RIGHT_BRACKET);
Expression<String> or = new Expression<String>(Connector.OR);
                or.setBegin(begin);
                or.setEnd(end);
                {if ("" != null) return or;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> empty_and() throws ParseException {Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    end = jj_consume_token(RIGHT_BRACKET);
Expression<String> and = new Expression<String>(Connector.AND);
                and.setBegin(begin);
        and.setEnd(end);
        {if ("" != null) return and;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_pre_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> s;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_22:
    while (true) {
      if (jj_2_120(1)) {
        ;
      } else {
        break label_22;
      }
      s = pre_gd();
exp.addChild(s);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_pre_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FORALL);
        List<TypedSymbol<String>> vars = null;
        Expression<String> s = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    vars = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    s = pre_gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(vars);
                exp.addChild(s);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> pref_gd() throws ParseException {Symbol<String> pref_name = null;
        Expression<String> exp = null;
        Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(PREFERENCE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      pref_name = pref_name();
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    exp = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setPrefName(pref_name);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> pref_name() throws ParseException {Token t = null;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.PREFERENCE, t.image.toLowerCase(),
                    t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> effect() throws ParseException {Expression<String> exp = null;
    if (jj_2_121(2)) {
      exp = empty_or();
    } else if (jj_2_122(2)) {
      exp = and_c_effect();
    } else if (jj_2_123(2)) {
      exp = c_effect();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_c_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> s = null;
        Token begin = null;
        Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_23:
    while (true) {
      if (jj_2_124(2)) {
        ;
      } else {
        break label_23;
      }
      s = c_effect();
exp.addChild(s);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> c_effect() throws ParseException {Expression<String> exp = null;
    if (jj_2_125(2) && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS))) {
      exp = forall_effect();
    } else if (jj_2_126(2) && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS))) {
      exp = when_con_effect();
    } else if (jj_2_127(2)) {
      exp = p_effect();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FORALL);
        List<TypedSymbol<String>> vars = null;
        Expression<String> s = null;
        Token begin = null;
        Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    vars = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    s = effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(vars);
                exp.addChild(s);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> when_con_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.WHEN);
        Expression<String> condition = null;
        Expression<String> effects = null;
        Token begin = null;
        Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(WHEN);
    condition = gd();
    effects = cond_effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(condition);
                exp.addChild(effects);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> cond_effect() throws ParseException {Expression<String> exp = null;
    if (jj_2_128(2)) {
      exp = and_p_effect();
    } else if (jj_2_129(2)) {
      exp = p_effect();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_p_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> s = null;
        Token begin = null;
        Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_24:
    while (true) {
      if (jj_2_130(2)) {
        ;
      } else {
        break label_24;
      }
      s = p_effect();
exp.addChild(s);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> p_effect() throws ParseException {Expression<String> exp = null;
    if (jj_2_131(2) && (this.isRequirement(RequireKey.FLUENTS)
                            || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                            || this.isRequirement(RequireKey.OBJECT_FLUENTS))) {
      exp = assign_op();
    } else if (jj_2_132(2) && (this.isRequirement(RequireKey.ACTION_COSTS))) {
      exp = increase_total_cost();
    } else if (jj_2_133(2)) {
      exp = literal(Lexer.TERM);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> increase_total_cost() throws ParseException {Expression<String> exp = new Expression<String>(Connector.INCREASE);
        Expression<String> op1 = null;
        Expression<String> op2 = null;
    Token begin = null;
    Token end = null;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(INCREASE);
    op1 = total_cost();
    op2 = numeric_term();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> total_cost() throws ParseException {Token t;
    Token begin;
    Token end;
    begin = jj_consume_token(LEFT_BRACKET);
    t = jj_consume_token(TOTAL_COST);
    end = jj_consume_token(RIGHT_BRACKET);
Expression<String> exp = new Expression<String>(Connector.FN_HEAD);
        exp.setSymbol(new Symbol<String>(SymbolType.FUNCTOR, t.image.toLowerCase(),
            t.beginLine, t.beginColumn, t.endLine, t.endColumn));
        exp.setArguments(new ArrayList<Symbol<String>>());
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> numeric_term() throws ParseException {List<Symbol<String>> tokenList = new ArrayList<Symbol<String>>();
        Symbol<String> s = null;
        Expression<String> exp = null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_BRACKET:
    case AT:
    case START:
    case END:
    case OVER:
    case TOTAL_COST:
    case SYMBOL:{
      exp = f_head();
      break;
      }
    case NUMBER:{
      exp = number();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> assign_op() throws ParseException {Expression<String> exp = null;
    if (jj_2_134(2)) {
      exp = assign();
    } else if (jj_2_135(2)) {
      exp = scale_up();
    } else if (jj_2_136(2)) {
      exp = scale_down();
    } else if (jj_2_137(2)) {
      exp = increase();
    } else if (jj_2_138(2)) {
      exp = decrease();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> assign() throws ParseException {Expression<String> exp = new Expression<String>(Connector.ASSIGN);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ASSIGN);
    op1 = f_head();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> scale_up() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SCALE_UP);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SCALE_UP);
    op1 = f_head();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> scale_down() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SCALE_DOWN);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SCALE_DOWN);
    op1 = f_head();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> increase() throws ParseException {Expression<String> exp = new Expression<String>(Connector.INCREASE);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(INCREASE);
    op1 = f_head();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> decrease() throws ParseException {Expression<String> exp = new Expression<String>(Connector.DECREASE);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(DECREASE);
    op1 = f_head();
    op2 = f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedAction durative_action_def() throws ParseException {Symbol<String> name = null;
        List<TypedSymbol<String>> parameters = null;
        Expression<String> duration = null;
        Expression<String> condition = null;
        Expression<String> effect = null;
        Token begin = null;
    Token end = null;
    try {
      begin = left_bracket();
      jj_consume_token(DURATIVE_ACTION);
      name = da_symbol();
      jj_consume_token(PARAMETERS);
      jj_consume_token(LEFT_BRACKET);
      parameters = typed_list(Lexer.VARIABLE);
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(DURATION);
      duration = duration_constraint();
      jj_consume_token(CONDITION);
      condition = da_gd();
      jj_consume_token(EFFECT);
      effect = da_effect();
      end = right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
ParsedAction a = new ParsedAction(name, parameters, condition, effect, duration);
                a.setBegin(begin);
                a.setEnd(end);
                {if ("" != null) return a;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> da_symbol() throws ParseException {Token t = null;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.ACTION, t.image.toLowerCase(),
            t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> duration_constraint() throws ParseException {Expression<String> exp = null;
    if (jj_2_139(2)) {
      exp = empty_or();
    } else if (jj_2_140(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = and_simple_duration_constraint();
    } else if (jj_2_141(2)) {
      exp = simple_duration_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_simple_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_25:
    while (true) {
      child = simple_duration_constraint();
exp.addChild(child);
      if (jj_2_142(2)) {
        ;
      } else {
        break label_25;
      }
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> simple_duration_constraint() throws ParseException {Expression<String> exp;
    if (jj_2_143(2)) {
      exp = d_op();
    } else if (jj_2_144(2)) {
      exp = at_simple_duration_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_simple_duration_constraint() throws ParseException {Expression<String> exp = null;
    if (jj_2_145(3)) {
      exp = at_start_simple_duration_constraint();
    } else if (jj_2_146(3)) {
      exp = at_end_simple_duration_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_start_simple_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_START);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(START);
    child = simple_duration_constraint();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_simple_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_END);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    child = simple_duration_constraint();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> d_op() throws ParseException {Expression<String> exp;
    if (jj_2_147(2)) {
      exp = equal_d_op();
    } else if (jj_2_148(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = gequal_d_op();
    } else if (jj_2_149(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = lequal_d_op();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_d_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.EQUAL_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(EQUAL);
    op1 = var_duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> gequal_d_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_OR_EQUAL_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GEQUAL);
    op1 = var_duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> lequal_d_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_OR_EQUAL_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LEQUAL);
    op1 = var_duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> var_duration() throws ParseException {Expression<String> exp = new Expression<String>(Connector.TIME_VAR);
        Token t;
    t = jj_consume_token(VAR_DURATION);
exp.setVariable(new Symbol<String>(SymbolType.DURATION_VARIABLE, t.image.toLowerCase(),
                    t.beginLine, t.beginColumn, t.endLine, t.endColumn));
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> d_value() throws ParseException {Expression<String> exp;
    if (jj_2_150(2)) {
      exp = number();
    } else if (jj_2_151(2) && (this.isRequirement(RequireKey.FLUENTS)
                            || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                            || this.isRequirement(RequireKey.OBJECT_FLUENTS))) {
      exp = f_exp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> method_duration_constraint() throws ParseException {Expression<String> exp;
    if (jj_2_152(2)) {
      exp = empty_or();
    } else if (jj_2_153(2)) {
      exp = simple_method_duration_constraint();
    } else if (jj_2_154(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      // ADD HDDL2.1
                  exp = and_simple_method_duration_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_simple_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_26:
    while (true) {
      child = simple_method_duration_constraint();
exp.addChild(child);
      if (jj_2_155(2)) {
        ;
      } else {
        break label_26;
      }
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> simple_method_duration_constraint() throws ParseException {Expression<String> exp;
    if (jj_2_156(2)) {
      exp = equal_method_duration_constraint();
    } else if (jj_2_157(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = great_method_duration_constraint();
    } else if (jj_2_158(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = great_or_equal_method_duration_constraint();
    } else if (jj_2_159(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = less_method_duration_constraint();
    } else if (jj_2_160(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = less_or_equal_method_duration_constraint();
    } else if (jj_2_161(2)) {
      exp = at_simple_duration_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.EQUAL_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(EQUAL);
    op1 = duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(begin);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> great_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GREAT);
    op1 = duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> great_or_equal_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.GREATER_OR_EQUAL_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(GEQUAL);
    op1 = duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LESS);
    op1 = duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> less_or_equal_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.LESS_OR_EQUAL_COMPARISON);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(LEQUAL);
    op1 = duration();
    op2 = d_value();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> duration() throws ParseException {Expression<String> duration;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VAR_DURATION:{
      duration = var_duration();
      break;
      }
    case LEFT_BRACKET:{
      duration = f_duration();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return duration;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_duration() throws ParseException {Expression<String> exp = new Expression<String>(Connector.F_TASK_TIME);
    Token t, begin, end;
    Symbol<String> argument;
    begin = jj_consume_token(LEFT_BRACKET);
    t = jj_consume_token(F_DURATION);
    argument = task_id_symbol();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setSymbol(new Symbol<String>(SymbolType.FUNCTOR, t.image.toLowerCase(),
            t.beginLine, t.beginColumn, t.endLine, t.endColumn));
        exp.setArguments(new ArrayList<Symbol<String>>());
        exp.setBegin(begin);
        exp.setEnd(end);
        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> temporal_simple_method_duration_constraint() throws ParseException {Expression<String> exp;
    if (jj_2_162(3)) {
      exp = at_start_simple_method_duration_constraint();
    } else if (jj_2_163(3)) {
      exp = at_end_simple_method_duration_constraint();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_start_simple_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_START);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(START);
    child = simple_duration_constraint();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_simple_method_duration_constraint() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_END);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    child = simple_duration_constraint();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_gd() throws ParseException {Expression<String> exp;
    if (jj_2_164(2)) {
      exp = pref_timed_gd();
    } else if (jj_2_165(2)) {
      exp = and_da_gd();
    } else if (jj_2_166(2) && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS))) {
      exp = forall_da_gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_da_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FORALL);
        Expression<String> child;
        List<TypedSymbol<String>> typedList;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    child = da_gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(typedList);
                exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_da_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_27:
    while (true) {
      if (jj_2_167(2)) {
        ;
      } else {
        break label_27;
      }
      child = da_gd();
exp.addChild(child);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> pref_timed_gd() throws ParseException {Expression<String> exp;
    if (jj_2_168(2)) {
      exp = timed_gd();
    } else if (jj_2_169(2) && (this.isRequirement(RequireKey.PREFERENCES))) {
      exp = named_pref_timed_gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> named_pref_timed_gd() throws ParseException {Symbol<String> pref_name = null;
        Expression<String> exp;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(PREFERENCE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      pref_name = pref_name();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    exp = timed_gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setPrefName(pref_name);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> timed_gd() throws ParseException {Expression<String> exp;
    if (jj_2_170(2)) {
      exp = at_timed_gd();
    } else if (jj_2_171(2)) {
      exp = over_timed_gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> over_timed_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.OVER_ALL);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(OVER);
    jj_consume_token(ALL);
    child = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_timed_gd() throws ParseException {Expression<String> exp;
    if (jj_2_172(3)) {
      exp = at_start_timed_gd();
    } else if (jj_2_173(2)) {
      exp = at_end_timed_gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_start_timed_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_START);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(START);
    child = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_timed_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_END);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    child = gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_effect() throws ParseException {Expression<String> exp;
    if (jj_2_174(2)) {
      exp = empty_and();
    } else if (jj_2_175(2)) {
      exp = and_da_effect();
    } else if (jj_2_176(2)) {
      exp = timed_effect();
    } else if (jj_2_177(2) && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS))) {
      exp = forall_da_effect();
    } else if (jj_2_178(2) && (this.isRequirement(RequireKey.CONDITIONAL_EFFECTS))) {
      exp = when_da_effect();
    } else if (jj_2_179(2) && (this.isRequirement(RequireKey.FLUENTS)
                            || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                            || this.isRequirement(RequireKey.OBJECT_FLUENTS))) {
      exp = da_assign_op();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_assign_op() throws ParseException {Expression<String> exp;
    if (jj_2_180(2)) {
      exp = da_assign();
    } else if (jj_2_181(2)) {
      exp = da_scale_up();
    } else if (jj_2_182(2)) {
      exp = da_scale_down();
    } else if (jj_2_183(2)) {
      exp = da_increase();
    } else if (jj_2_184(2)) {
      exp = da_decrease();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_assign() throws ParseException {Expression<String> exp = new Expression<String>(Connector.ASSIGN);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ASSIGN);
    if (jj_2_185(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_186(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_scale_up() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SCALE_UP);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SCALE_UP);
    if (jj_2_187(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_188(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_scale_down() throws ParseException {Expression<String> exp = new Expression<String>(Connector.SCALE_DOWN);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SCALE_DOWN);
    if (jj_2_189(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_190(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_increase() throws ParseException {Expression<String> exp = new Expression<String>(Connector.INCREASE);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(INCREASE);
    if (jj_2_191(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_192(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_decrease() throws ParseException {Expression<String> exp = new Expression<String>(Connector.DECREASE);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(DECREASE);
    if (jj_2_193(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_194(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> when_da_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.WHEN);
        Expression<String> condition, effect;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(WHEN);
    condition = da_gd();
    effect = da_effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(condition);
                exp.addChild(effect);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_da_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FORALL);
        List<TypedSymbol<String>> typedList;
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    child = da_effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(typedList);
                exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_da_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_28:
    while (true) {
      if (jj_2_195(2)) {
        ;
      } else {
        break label_28;
      }
      child = da_effect();
exp.addChild(child);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> timed_effect() throws ParseException {Expression<String> exp;
    if (jj_2_196(2)) {
      exp = at_a_effect();
    } else if (jj_2_197(3) && (this.isRequirement(RequireKey.CONTINOUS_EFFECTS))) {
      exp = assign_op_t();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_f_assign_da() throws ParseException {Expression<String> exp;
    if (jj_2_198(3)) {
      exp = at_start_f_assign_da();
    } else if (jj_2_199(3)) {
      exp = at_end_f_assign_da();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_start_f_assign_da() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_START);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(START);
    child = f_assign_da();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_f_assign_da() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_END);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    child = f_assign_da();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_a_effect() throws ParseException {Expression<String> exp;
    if (jj_2_200(4)) {
      exp = at_start_a_effect();
    } else if (jj_2_201(4)) {
      exp = at_end_a_effect();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> a_effect() throws ParseException {Expression<String> exp;
    if (jj_2_202(2)) {
      exp = f_assign_da();
    } else if (jj_2_203(2)) {
      exp = literal(Lexer.TERM);
    } else if (jj_2_204(2)) {
      exp = when_con_effect();
    } else if (jj_2_205(2)) {
      exp = forall_effect();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_start_a_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_START);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(START);
    child = a_effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> at_end_a_effect() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AT_END);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    jj_consume_token(END);
    child = a_effect();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> assign_op_t() throws ParseException {Expression<String> exp;
    if (jj_2_206(2)) {
      exp = increase_assign_op_t();
    } else if (jj_2_207(2)) {
      exp = decrease_assign_op_t();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> increase_assign_op_t() throws ParseException {Expression<String> exp = new Expression<String>(Connector.ASSIGN);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(INCREASE);
    op1 = f_head();
    op2 = f_exp_t();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> decrease_assign_op_t() throws ParseException {Expression<String> exp = new Expression<String>(Connector.ASSIGN);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(DECREASE);
    op1 = f_head();
    op2 = f_exp_t();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_exp_t() throws ParseException {Expression<String> exp = new Expression<String>(Connector.F_EXP_T);
        Symbol<String> continuous_variable_name;
        Expression<String> child;
        Token begin, end;
    if (jj_2_208(2)) {
      begin = jj_consume_token(LEFT_BRACKET);
      jj_consume_token(MUL);
      continuous_variable_name = continuous_variable();
      child = f_exp();
      end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                            exp.setEnd(end);
                            exp.addChild(child);
                            exp.setVariable(continuous_variable_name);
    } else if (jj_2_209(2)) {
      begin = jj_consume_token(LEFT_BRACKET);
      jj_consume_token(MUL);
      child = f_exp();
      continuous_variable_name = continuous_variable();
      end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                exp.addChild(child);
                exp.setVariable(continuous_variable_name);
    } else if (jj_2_210(2)) {
      continuous_variable_name = continuous_variable();
exp.setLocation(continuous_variable_name.getLocation());
                exp.setVariable(continuous_variable_name);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> continuous_variable() throws ParseException {Token t;
    t = jj_consume_token(CONTINUOUS_VARIABLE);
{if ("" != null) return new Symbol<String>(SymbolType.CONTINUOUS_VARIABLE, t.image.toLowerCase(),
                    t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_assign_da() throws ParseException {Expression<String> exp;
    if (jj_2_211(2)) {
      exp = da_assign();
    } else if (jj_2_212(2)) {
      exp = da_scale_up();
    } else if (jj_2_213(2)) {
      exp = da_scale_down();
    } else if (jj_2_214(2)) {
      exp = da_increase();
    } else if (jj_2_215(2)) {
      exp = da_decrease();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> f_exp_da() throws ParseException {Expression<String> exp;
    if (jj_2_216(2)) {
      exp = da_op();
    } else if (jj_2_217(2) && (this.isRequirement(RequireKey.DURATION_INEQUALITIES))) {
      exp = var_duration();
    } else if (jj_2_218(2)) {
      exp = f_exp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_op() throws ParseException {Expression<String> exp;
    if (jj_2_219(2)) {
      exp = da_add_op();
    } else if (jj_2_220(2)) {
      exp = da_substract_op();
    } else if (jj_2_221(2)) {
      exp = da_multiply_op();
    } else if (jj_2_222(2)) {
      exp = da_divide_op();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_add_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.PLUS);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ADD);
    if (jj_2_223(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_224(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_substract_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MINUS);
        Expression<String> op1, op2 = null;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SUB);
    if (jj_2_227(3)) {
      op1 = f_head();
      if (jj_2_225(1)) {
        op2 = f_exp_da();
      } else {
        ;
      }
    } else if (jj_2_228(3)) {
      if (jj_2_226(2)) {
        op2 = f_exp_da();
      } else {
        ;
      }
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                if (op2 != null) exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_multiply_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MULTIPLICATION);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(MUL);
    if (jj_2_229(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_230(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> da_divide_op() throws ParseException {Expression<String> exp = new Expression<String>(Connector.DIVISION);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(DIV);
    if (jj_2_231(3)) {
      op1 = f_head();
      op2 = f_exp_da();
    } else if (jj_2_232(3)) {
      op2 = f_exp_da();
      op1 = f_head();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedProblem problem() throws ParseException {
    if (this.isRequirement(RequireKey.HIERARCHY)) {
      htn_problem();
    } else {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LEFT_BRACKET:{
        pddl_problem();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
{if ("" != null) return this.problem;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedProblem pddl_problem() throws ParseException {Symbol<String> name;
        Symbol<String> domain;
    try {
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(DEFINE);
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(PROBLEM);
      name = problem_name();
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(P_DOMAIN);
      domain = domain_problem_name();
this.problem = new DefaultParsedProblem(name, domain);
      jj_consume_token(RIGHT_BRACKET);
      if (jj_2_233(2)) {
        require_def(Lexer.PARSER_PROBLEM);
      } else {
        ;
      }
      if (jj_2_234(2)) {
        object_declaration();
      } else {
        ;
      }
      init();
      goal();
      if (jj_2_235(2) && (this.isRequirement(RequireKey.CONSTRAINTS))) {
        pddl_const(Lexer.PARSER_PROBLEM);
      } else {
        ;
      }
      if (jj_2_236(2) && (this.isRequirement(RequireKey.NUMERIC_FLUENTS))) {
        metric_spec();
      } else {
        ;
      }
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(0);
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
{if ("" != null) return this.problem;}
    throw new Error("Missing return statement in function");
  }

  final public ParsedProblem htn_problem() throws ParseException {Symbol<String> name;
        Symbol<String> domain;
        ParsedTaskNetwork taskNetwork;
        List<TypedSymbol<String>> parameters = new ArrayList<TypedSymbol<String>>();
    try {
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(DEFINE);
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(PROBLEM);
      name = problem_name();
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(P_DOMAIN);
      domain = domain_problem_name();
this.problem = new DefaultParsedProblem(name, domain);
      jj_consume_token(RIGHT_BRACKET);
      if (jj_2_237(2)) {
        require_def(Lexer.PARSER_PROBLEM);
      } else {
        ;
      }
      if (jj_2_238(2)) {
        object_declaration();
      } else {
        ;
      }
      jj_consume_token(LEFT_BRACKET);
      jj_consume_token(HTN);
      if (jj_2_239(2)) {
        jj_consume_token(PARAMETERS);
        jj_consume_token(LEFT_BRACKET);
        parameters = typed_list(Lexer.VARIABLE);
        jj_consume_token(RIGHT_BRACKET);
      } else {
        ;
      }
      if (jj_2_240(2) && (!this.isRequirement(RequireKey.DURATIVE_ACTIONS))) {
        taskNetwork = task_network();
      } else if (jj_2_241(2) && (this.isRequirement(RequireKey.DURATIVE_ACTIONS))) {
        taskNetwork = durative_task_network();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
taskNetwork.setParameters(parameters);
                this.problem.setInitialTaskNetwork(taskNetwork);
      jj_consume_token(RIGHT_BRACKET);
      init();
      if (jj_2_242(2)) {
        goal();
      } else {
        ;
      }
      if (jj_2_243(2) && (this.isRequirement(RequireKey.NUMERIC_FLUENTS))) {
        metric_spec();
      } else {
        ;
      }
      jj_consume_token(RIGHT_BRACKET);
      jj_consume_token(0);
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
{if ("" != null) return this.problem;}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> problem_name() throws ParseException {Token t = null;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.PROBLEM, t.image.toLowerCase(),
                t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> domain_problem_name() throws ParseException {Token t = null;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.DOMAIN, t.image.toLowerCase(),
                t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public Symbol<String> domain_name() throws ParseException {Token t = null;
    t = jj_consume_token(SYMBOL);
{if ("" != null) return new Symbol<String>(SymbolType.DOMAIN, t.image.toLowerCase(),
                t.beginLine, t.beginColumn, t.endLine, t.endColumn);}
    throw new Error("Missing return statement in function");
  }

  final public void object_declaration() throws ParseException {List<TypedSymbol<String>> typedList = null;
    try {
      left_bracket();
      jj_consume_token(OBJECTS);
      typedList = typed_list(Lexer.CONSTANT);
      right_bracket();
for (TypedSymbol<String> object : typedList) {
                if (object.getTypes().isEmpty()) {
                    object.addType(Symbol.OBJECT_TYPE);
                }
                this.problem.addObject(object);
                        }
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public void init() throws ParseException {Expression<String> exp;
    try {
      left_bracket();
      jj_consume_token(INIT);
      label_29:
      while (true) {
        if (jj_2_244(2)) {
          ;
        } else {
          break label_29;
        }
        exp = init_el();
this.problem.addInitialFact(exp);
      }
      right_bracket();
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public Expression<String> init_el() throws ParseException {Expression<String> exp;
    if (jj_2_245(3) && (this.isRequirement(RequireKey.TIMED_INITIAL_LITERALS))) {
      exp = timed_literal();
    } else if (jj_2_246(2)) {
      exp = literal(Lexer.CONSTANT);
    } else if (jj_2_247(2) && (this.isRequirement(RequireKey.FLUENTS)
                            || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                            || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                            || this.isRequirement(RequireKey.ACTION_COSTS))) {
      exp = equal_init_el();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> equal_init_el() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FN_ATOM);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(EQUAL);
    op1 = constant_f_head();
    op2 = number();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> timed_literal() throws ParseException {Expression<String> exp = new Expression<String>(Connector.TIMED_LITERAL);
        Expression<String> literal, time;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AT);
    time = number();
    literal = literal(Lexer.CONSTANT);
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(time);
                exp.addChild(literal);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public void goal() throws ParseException {
    left_bracket();
    jj_consume_token(GOAL);
    pddl_goal();
    right_bracket();
  }

  final public void pddl_goal() throws ParseException {Expression<String> exp = null;
        Boolean goal_utilities = false;
        if (this.isRequirement(RequireKey.GOAL_UTILITIES)
                        && !this.isRequirement(RequireKey.PREFERENCES)) {
                this.getRequirements().add(RequireKey.PREFERENCES);
                goal_utilities = true;
        }
    try {
      exp = pre_gd();
this.problem.setGoal(exp);
                        if (goal_utilities) {
                                this.getRequirements().remove(RequireKey.PREFERENCES);
                        }
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public void pddl_const(int type) throws ParseException {Expression<String> conGD;
    try {
      left_bracket();
      jj_consume_token(CONSTRAINTS);
      conGD = pref_con_gd();
      right_bracket();
if (type == Lexer.PARSER_DOMAIN) {
                                this.domain.setConstraints(conGD);
                        } else {
                                this.problem.setConstraints(conGD);
                        }
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public Expression<String> pref_con_gd() throws ParseException {Expression<String> exp;
    if (jj_2_248(2)) {
      exp = and_pref_con_gd();
    } else if (jj_2_249(2) && (this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS))) {
      exp = forall_pref_con_gd();
    } else if (jj_2_250(2) && (this.isRequirement(RequireKey.PREFERENCES))) {
      exp = named_pref_con_gd();
    } else if (jj_2_251(2)) {
      exp = con_gd();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> and_pref_con_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.AND);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(AND);
    label_30:
    while (true) {
      if (jj_2_252(2)) {
        ;
      } else {
        break label_30;
      }
      child = pref_con_gd();
exp.addChild(child);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
        exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> named_pref_con_gd() throws ParseException {Expression<String> exp;
        Symbol<String> pref_name = null;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(PREFERENCE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SYMBOL:{
      pref_name = pref_name();
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      ;
    }
    exp = con_gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setPrefName(pref_name);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> forall_pref_con_gd() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FORALL);
        List<TypedSymbol<String>> typedList;
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(FORALL);
    jj_consume_token(LEFT_BRACKET);
    typedList = typed_list(Lexer.VARIABLE);
    jj_consume_token(RIGHT_BRACKET);
    child = pref_con_gd();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setQuantifiedVariables(typedList);
                exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public void metric_spec() throws ParseException {Expression<String> exp;
    try {
      if (jj_2_253(3)) {
        exp = maximize();
      } else if (jj_2_254(3)) {
        exp = minimize();
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
this.problem.setMetric(exp);
    } catch (Throwable e) {
this.error(e, token.beginLine, token.beginColumn);
    }
  }

  final public Expression<String> maximize() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MAXIMIZE);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(METRIC);
    jj_consume_token(MAXIMIZE);
    child = metric_f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> minimize() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MINIMIZE);
        Expression<String> child;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(METRIC);
    jj_consume_token(MINIMIZE);
    child = metric_f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(child);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> metric_f_exp() throws ParseException {Expression<String> exp;
    if (jj_2_255(2)) {
      exp = op_metric_f_exp();
    } else if (jj_2_256(2)) {
      exp = number();
    } else if (jj_2_257(2)) {
      exp = constant_f_head();
    } else if (jj_2_258(2)) {
      exp = total_time();
    } else if (jj_2_259(2)) {
      exp = violated_pref_exp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> violated_pref_exp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.IS_VIOLATED);
        Symbol<String> pref_name;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(IS_VIOLATED);
    pref_name = pref_name();
    end = jj_consume_token(RIGHT_BRACKET);
exp.setPrefName(pref_name);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> constant_f_head() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FN_HEAD);
        List<Symbol<String>> args = new ArrayList<Symbol<String>>();
        Symbol<String> functor, argument;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    functor = functor();
exp.setSymbol(functor);
    label_31:
    while (true) {
      if (jj_2_260(2)) {
        ;
      } else {
        break label_31;
      }
      argument = constant();
args.add(argument);
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setArguments(args);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> total_time() throws ParseException {Expression<String> exp = new Expression<String>(Connector.FN_HEAD);
        Token t, begin, end;
    if (jj_2_261(3)) {
      begin = jj_consume_token(LEFT_BRACKET);
      t = jj_consume_token(TOTAL_TIME);
      end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                    exp.setEnd(end);
    } else if (jj_2_262(2)) {
      t = jj_consume_token(TOTAL_TIME);
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
exp.setSymbol(new Symbol<String>(SymbolType.FUNCTOR, t.image.toLowerCase(),
                            t.beginLine, t.beginColumn, t.endLine, t.endColumn));
                        exp.setArguments(new ArrayList<Symbol<String>>());
                        exp.setLocation(exp.getSymbol().getLocation());
                        {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> op_metric_f_exp() throws ParseException {Expression<String> exp;
    if (jj_2_263(2)) {
      exp = add_op_metric_f_exp();
    } else if (jj_2_264(2)) {
      exp = substract_op_metric_f_exp();
    } else if (jj_2_265(2)) {
      exp = multi_op_metric_f_exp();
    } else if (jj_2_266(2)) {
      exp = div_op_metric_f_exp();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> add_op_metric_f_exp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.PLUS);
        Expression<String> op;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(ADD);
    op = metric_f_exp();
exp.addChild(op);
    label_32:
    while (true) {
      op = metric_f_exp();
exp.addChild(op);
      if (jj_2_267(2)) {
        ;
      } else {
        break label_32;
      }
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> substract_op_metric_f_exp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MINUS);
        Expression<String> op1, op2 = null;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(SUB);
    op1 = metric_f_exp();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT_BRACKET:
    case TOTAL_TIME:
    case NUMBER:{
      op2 = metric_f_exp();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      ;
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                if (op2 != null) exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> div_op_metric_f_exp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.DIVISION);
        Expression<String> op1, op2;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(DIV);
    op1 = metric_f_exp();
    op2 = metric_f_exp();
    end = jj_consume_token(RIGHT_BRACKET);
exp.addChild(op1);
                exp.addChild(op2);
                exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  final public Expression<String> multi_op_metric_f_exp() throws ParseException {Expression<String> exp = new Expression<String>(Connector.MULTIPLICATION);
        Expression<String> op;
        Token begin, end;
    begin = jj_consume_token(LEFT_BRACKET);
    jj_consume_token(MUL);
    op = metric_f_exp();
exp.addChild(op);
    label_33:
    while (true) {
      op = metric_f_exp();
exp.addChild(op);
      if (jj_2_268(2)) {
        ;
      } else {
        break label_33;
      }
    }
    end = jj_consume_token(RIGHT_BRACKET);
exp.setBegin(begin);
                exp.setEnd(end);
                {if ("" != null) return exp;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_2_7(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  private boolean jj_2_8(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  private boolean jj_2_9(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  private boolean jj_2_10(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  private boolean jj_2_11(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  private boolean jj_2_12(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  private boolean jj_2_13(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  private boolean jj_2_14(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  private boolean jj_2_15(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  private boolean jj_2_16(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  private boolean jj_2_17(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  private boolean jj_2_18(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  private boolean jj_2_19(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  private boolean jj_2_20(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  private boolean jj_2_21(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  private boolean jj_2_22(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  private boolean jj_2_23(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  private boolean jj_2_24(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  private boolean jj_2_25(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  private boolean jj_2_26(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  private boolean jj_2_27(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  private boolean jj_2_28(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  private boolean jj_2_29(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  private boolean jj_2_30(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  private boolean jj_2_31(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  private boolean jj_2_32(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  private boolean jj_2_33(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  private boolean jj_2_34(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  private boolean jj_2_35(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  private boolean jj_2_36(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  private boolean jj_2_37(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  private boolean jj_2_38(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  private boolean jj_2_39(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  private boolean jj_2_40(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  private boolean jj_2_41(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  private boolean jj_2_42(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  private boolean jj_2_43(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  private boolean jj_2_44(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  private boolean jj_2_45(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  private boolean jj_2_46(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_46(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(45, xla); }
  }

  private boolean jj_2_47(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_47(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(46, xla); }
  }

  private boolean jj_2_48(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_48(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(47, xla); }
  }

  private boolean jj_2_49(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_49(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(48, xla); }
  }

  private boolean jj_2_50(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_50(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(49, xla); }
  }

  private boolean jj_2_51(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_51(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(50, xla); }
  }

  private boolean jj_2_52(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_52(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(51, xla); }
  }

  private boolean jj_2_53(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_53(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(52, xla); }
  }

  private boolean jj_2_54(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_54(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(53, xla); }
  }

  private boolean jj_2_55(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_55(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(54, xla); }
  }

  private boolean jj_2_56(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_56(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(55, xla); }
  }

  private boolean jj_2_57(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_57(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(56, xla); }
  }

  private boolean jj_2_58(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_58(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(57, xla); }
  }

  private boolean jj_2_59(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_59(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(58, xla); }
  }

  private boolean jj_2_60(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_60(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(59, xla); }
  }

  private boolean jj_2_61(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_61(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(60, xla); }
  }

  private boolean jj_2_62(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_62(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(61, xla); }
  }

  private boolean jj_2_63(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_63(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(62, xla); }
  }

  private boolean jj_2_64(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_64(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(63, xla); }
  }

  private boolean jj_2_65(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_65(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(64, xla); }
  }

  private boolean jj_2_66(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_66(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(65, xla); }
  }

  private boolean jj_2_67(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_67(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(66, xla); }
  }

  private boolean jj_2_68(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_68(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(67, xla); }
  }

  private boolean jj_2_69(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_69(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(68, xla); }
  }

  private boolean jj_2_70(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_70(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(69, xla); }
  }

  private boolean jj_2_71(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_71(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(70, xla); }
  }

  private boolean jj_2_72(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_72(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(71, xla); }
  }

  private boolean jj_2_73(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_73(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(72, xla); }
  }

  private boolean jj_2_74(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_74(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(73, xla); }
  }

  private boolean jj_2_75(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_75(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(74, xla); }
  }

  private boolean jj_2_76(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_76(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(75, xla); }
  }

  private boolean jj_2_77(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_77(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(76, xla); }
  }

  private boolean jj_2_78(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_78(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(77, xla); }
  }

  private boolean jj_2_79(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_79(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(78, xla); }
  }

  private boolean jj_2_80(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_80(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(79, xla); }
  }

  private boolean jj_2_81(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_81(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(80, xla); }
  }

  private boolean jj_2_82(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_82(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(81, xla); }
  }

  private boolean jj_2_83(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_83(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(82, xla); }
  }

  private boolean jj_2_84(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_84(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(83, xla); }
  }

  private boolean jj_2_85(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_85(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(84, xla); }
  }

  private boolean jj_2_86(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_86(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(85, xla); }
  }

  private boolean jj_2_87(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_87(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(86, xla); }
  }

  private boolean jj_2_88(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_88(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(87, xla); }
  }

  private boolean jj_2_89(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_89(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(88, xla); }
  }

  private boolean jj_2_90(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_90(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(89, xla); }
  }

  private boolean jj_2_91(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_91(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(90, xla); }
  }

  private boolean jj_2_92(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_92(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(91, xla); }
  }

  private boolean jj_2_93(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_93(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(92, xla); }
  }

  private boolean jj_2_94(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_94(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(93, xla); }
  }

  private boolean jj_2_95(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_95(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(94, xla); }
  }

  private boolean jj_2_96(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_96(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(95, xla); }
  }

  private boolean jj_2_97(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_97(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(96, xla); }
  }

  private boolean jj_2_98(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_98(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(97, xla); }
  }

  private boolean jj_2_99(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_99(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(98, xla); }
  }

  private boolean jj_2_100(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_100(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(99, xla); }
  }

  private boolean jj_2_101(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_101(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(100, xla); }
  }

  private boolean jj_2_102(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_102(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(101, xla); }
  }

  private boolean jj_2_103(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_103(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(102, xla); }
  }

  private boolean jj_2_104(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_104(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(103, xla); }
  }

  private boolean jj_2_105(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_105(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(104, xla); }
  }

  private boolean jj_2_106(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_106(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(105, xla); }
  }

  private boolean jj_2_107(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_107(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(106, xla); }
  }

  private boolean jj_2_108(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_108(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(107, xla); }
  }

  private boolean jj_2_109(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_109(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(108, xla); }
  }

  private boolean jj_2_110(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_110(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(109, xla); }
  }

  private boolean jj_2_111(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_111(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(110, xla); }
  }

  private boolean jj_2_112(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_112(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(111, xla); }
  }

  private boolean jj_2_113(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_113(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(112, xla); }
  }

  private boolean jj_2_114(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_114(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(113, xla); }
  }

  private boolean jj_2_115(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_115(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(114, xla); }
  }

  private boolean jj_2_116(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_116(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(115, xla); }
  }

  private boolean jj_2_117(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_117(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(116, xla); }
  }

  private boolean jj_2_118(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_118(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(117, xla); }
  }

  private boolean jj_2_119(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_119(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(118, xla); }
  }

  private boolean jj_2_120(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_120(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(119, xla); }
  }

  private boolean jj_2_121(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_121(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(120, xla); }
  }

  private boolean jj_2_122(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_122(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(121, xla); }
  }

  private boolean jj_2_123(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_123(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(122, xla); }
  }

  private boolean jj_2_124(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_124(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(123, xla); }
  }

  private boolean jj_2_125(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_125(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(124, xla); }
  }

  private boolean jj_2_126(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_126(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(125, xla); }
  }

  private boolean jj_2_127(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_127(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(126, xla); }
  }

  private boolean jj_2_128(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_128(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(127, xla); }
  }

  private boolean jj_2_129(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_129(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(128, xla); }
  }

  private boolean jj_2_130(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_130(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(129, xla); }
  }

  private boolean jj_2_131(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_131(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(130, xla); }
  }

  private boolean jj_2_132(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_132(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(131, xla); }
  }

  private boolean jj_2_133(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_133(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(132, xla); }
  }

  private boolean jj_2_134(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_134(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(133, xla); }
  }

  private boolean jj_2_135(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_135(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(134, xla); }
  }

  private boolean jj_2_136(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_136(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(135, xla); }
  }

  private boolean jj_2_137(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_137(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(136, xla); }
  }

  private boolean jj_2_138(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_138(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(137, xla); }
  }

  private boolean jj_2_139(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_139(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(138, xla); }
  }

  private boolean jj_2_140(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_140(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(139, xla); }
  }

  private boolean jj_2_141(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_141(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(140, xla); }
  }

  private boolean jj_2_142(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_142(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(141, xla); }
  }

  private boolean jj_2_143(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_143(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(142, xla); }
  }

  private boolean jj_2_144(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_144(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(143, xla); }
  }

  private boolean jj_2_145(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_145(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(144, xla); }
  }

  private boolean jj_2_146(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_146(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(145, xla); }
  }

  private boolean jj_2_147(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_147(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(146, xla); }
  }

  private boolean jj_2_148(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_148(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(147, xla); }
  }

  private boolean jj_2_149(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_149(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(148, xla); }
  }

  private boolean jj_2_150(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_150(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(149, xla); }
  }

  private boolean jj_2_151(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_151(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(150, xla); }
  }

  private boolean jj_2_152(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_152(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(151, xla); }
  }

  private boolean jj_2_153(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_153(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(152, xla); }
  }

  private boolean jj_2_154(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_154(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(153, xla); }
  }

  private boolean jj_2_155(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_155(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(154, xla); }
  }

  private boolean jj_2_156(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_156(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(155, xla); }
  }

  private boolean jj_2_157(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_157(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(156, xla); }
  }

  private boolean jj_2_158(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_158(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(157, xla); }
  }

  private boolean jj_2_159(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_159(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(158, xla); }
  }

  private boolean jj_2_160(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_160(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(159, xla); }
  }

  private boolean jj_2_161(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_161(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(160, xla); }
  }

  private boolean jj_2_162(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_162(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(161, xla); }
  }

  private boolean jj_2_163(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_163(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(162, xla); }
  }

  private boolean jj_2_164(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_164(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(163, xla); }
  }

  private boolean jj_2_165(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_165(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(164, xla); }
  }

  private boolean jj_2_166(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_166(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(165, xla); }
  }

  private boolean jj_2_167(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_167(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(166, xla); }
  }

  private boolean jj_2_168(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_168(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(167, xla); }
  }

  private boolean jj_2_169(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_169(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(168, xla); }
  }

  private boolean jj_2_170(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_170(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(169, xla); }
  }

  private boolean jj_2_171(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_171(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(170, xla); }
  }

  private boolean jj_2_172(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_172(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(171, xla); }
  }

  private boolean jj_2_173(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_173(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(172, xla); }
  }

  private boolean jj_2_174(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_174(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(173, xla); }
  }

  private boolean jj_2_175(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_175(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(174, xla); }
  }

  private boolean jj_2_176(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_176(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(175, xla); }
  }

  private boolean jj_2_177(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_177(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(176, xla); }
  }

  private boolean jj_2_178(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_178(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(177, xla); }
  }

  private boolean jj_2_179(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_179(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(178, xla); }
  }

  private boolean jj_2_180(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_180(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(179, xla); }
  }

  private boolean jj_2_181(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_181(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(180, xla); }
  }

  private boolean jj_2_182(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_182(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(181, xla); }
  }

  private boolean jj_2_183(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_183(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(182, xla); }
  }

  private boolean jj_2_184(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_184(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(183, xla); }
  }

  private boolean jj_2_185(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_185(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(184, xla); }
  }

  private boolean jj_2_186(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_186(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(185, xla); }
  }

  private boolean jj_2_187(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_187(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(186, xla); }
  }

  private boolean jj_2_188(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_188(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(187, xla); }
  }

  private boolean jj_2_189(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_189(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(188, xla); }
  }

  private boolean jj_2_190(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_190(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(189, xla); }
  }

  private boolean jj_2_191(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_191(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(190, xla); }
  }

  private boolean jj_2_192(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_192(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(191, xla); }
  }

  private boolean jj_2_193(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_193(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(192, xla); }
  }

  private boolean jj_2_194(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_194(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(193, xla); }
  }

  private boolean jj_2_195(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_195(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(194, xla); }
  }

  private boolean jj_2_196(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_196(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(195, xla); }
  }

  private boolean jj_2_197(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_197(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(196, xla); }
  }

  private boolean jj_2_198(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_198(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(197, xla); }
  }

  private boolean jj_2_199(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_199(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(198, xla); }
  }

  private boolean jj_2_200(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_200(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(199, xla); }
  }

  private boolean jj_2_201(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_201(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(200, xla); }
  }

  private boolean jj_2_202(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_202(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(201, xla); }
  }

  private boolean jj_2_203(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_203(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(202, xla); }
  }

  private boolean jj_2_204(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_204(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(203, xla); }
  }

  private boolean jj_2_205(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_205(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(204, xla); }
  }

  private boolean jj_2_206(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_206(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(205, xla); }
  }

  private boolean jj_2_207(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_207(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(206, xla); }
  }

  private boolean jj_2_208(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_208(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(207, xla); }
  }

  private boolean jj_2_209(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_209(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(208, xla); }
  }

  private boolean jj_2_210(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_210(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(209, xla); }
  }

  private boolean jj_2_211(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_211(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(210, xla); }
  }

  private boolean jj_2_212(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_212(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(211, xla); }
  }

  private boolean jj_2_213(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_213(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(212, xla); }
  }

  private boolean jj_2_214(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_214(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(213, xla); }
  }

  private boolean jj_2_215(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_215(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(214, xla); }
  }

  private boolean jj_2_216(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_216(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(215, xla); }
  }

  private boolean jj_2_217(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_217(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(216, xla); }
  }

  private boolean jj_2_218(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_218(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(217, xla); }
  }

  private boolean jj_2_219(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_219(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(218, xla); }
  }

  private boolean jj_2_220(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_220(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(219, xla); }
  }

  private boolean jj_2_221(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_221(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(220, xla); }
  }

  private boolean jj_2_222(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_222(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(221, xla); }
  }

  private boolean jj_2_223(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_223(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(222, xla); }
  }

  private boolean jj_2_224(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_224(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(223, xla); }
  }

  private boolean jj_2_225(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_225(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(224, xla); }
  }

  private boolean jj_2_226(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_226(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(225, xla); }
  }

  private boolean jj_2_227(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_227(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(226, xla); }
  }

  private boolean jj_2_228(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_228(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(227, xla); }
  }

  private boolean jj_2_229(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_229(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(228, xla); }
  }

  private boolean jj_2_230(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_230(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(229, xla); }
  }

  private boolean jj_2_231(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_231(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(230, xla); }
  }

  private boolean jj_2_232(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_232(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(231, xla); }
  }

  private boolean jj_2_233(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_233(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(232, xla); }
  }

  private boolean jj_2_234(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_234(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(233, xla); }
  }

  private boolean jj_2_235(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_235(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(234, xla); }
  }

  private boolean jj_2_236(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_236(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(235, xla); }
  }

  private boolean jj_2_237(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_237(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(236, xla); }
  }

  private boolean jj_2_238(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_238(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(237, xla); }
  }

  private boolean jj_2_239(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_239(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(238, xla); }
  }

  private boolean jj_2_240(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_240(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(239, xla); }
  }

  private boolean jj_2_241(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_241(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(240, xla); }
  }

  private boolean jj_2_242(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_242(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(241, xla); }
  }

  private boolean jj_2_243(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_243(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(242, xla); }
  }

  private boolean jj_2_244(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_244(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(243, xla); }
  }

  private boolean jj_2_245(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_245(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(244, xla); }
  }

  private boolean jj_2_246(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_246(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(245, xla); }
  }

  private boolean jj_2_247(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_247(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(246, xla); }
  }

  private boolean jj_2_248(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_248(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(247, xla); }
  }

  private boolean jj_2_249(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_249(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(248, xla); }
  }

  private boolean jj_2_250(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_250(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(249, xla); }
  }

  private boolean jj_2_251(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_251(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(250, xla); }
  }

  private boolean jj_2_252(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_252(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(251, xla); }
  }

  private boolean jj_2_253(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_253(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(252, xla); }
  }

  private boolean jj_2_254(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_254(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(253, xla); }
  }

  private boolean jj_2_255(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_255(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(254, xla); }
  }

  private boolean jj_2_256(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_256(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(255, xla); }
  }

  private boolean jj_2_257(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_257(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(256, xla); }
  }

  private boolean jj_2_258(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_258(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(257, xla); }
  }

  private boolean jj_2_259(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_259(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(258, xla); }
  }

  private boolean jj_2_260(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_260(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(259, xla); }
  }

  private boolean jj_2_261(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_261(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(260, xla); }
  }

  private boolean jj_2_262(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_262(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(261, xla); }
  }

  private boolean jj_2_263(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_263(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(262, xla); }
  }

  private boolean jj_2_264(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_264(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(263, xla); }
  }

  private boolean jj_2_265(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_265(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(264, xla); }
  }

  private boolean jj_2_266(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_266(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(265, xla); }
  }

  private boolean jj_2_267(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_267(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(266, xla); }
  }

  private boolean jj_2_268(int xla)
 {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_268(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(267, xla); }
  }

  private boolean jj_3R_135()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  private boolean jj_3_91()
 {
    if (jj_3R_109()) return true;
    return false;
  }

  private boolean jj_3_90()
 {
    if (jj_3R_108()) return true;
    return false;
  }

  private boolean jj_3_89()
 {
    if (jj_3R_107()) return true;
    return false;
  }

  private boolean jj_3_88()
 {
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3R_237()
 {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_87()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_170()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    return false;
  }

  private boolean jj_3_15()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_103()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_87()) {
    jj_scanpos = xsp;
    if (jj_3_88()) {
    jj_scanpos = xsp;
    if (jj_3_89()) {
    jj_scanpos = xsp;
    if (jj_3_90()) {
    jj_scanpos = xsp;
    if (jj_3_91()) {
    jj_scanpos = xsp;
    if (jj_3_92()) {
    jj_scanpos = xsp;
    if (jj_3_93()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_169()
 {
    if (jj_3R_170()) return true;
    return false;
  }

  private boolean jj_3R_65()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EXISTS)) return true;
    return false;
  }

  private boolean jj_3_168()
 {
    if (jj_3R_169()) return true;
    return false;
  }

  private boolean jj_3R_101()
 {
    if (jj_3R_105()) return true;
    return false;
  }

  private boolean jj_3R_134()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3R_166()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_168()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.PREFERENCES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_169()) return true;
    }
    return false;
  }

  private boolean jj_3_124()
 {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3_127()
 {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3_126()
 {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3_125()
 {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3_167()
 {
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_203()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(OBJECTS)) return true;
    return false;
  }

  private boolean jj_3_18()
 {
    if (jj_3R_41()) return true;
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3R_104()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_237()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_64()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(IMPLY)) return true;
    return false;
  }

  private boolean jj_3R_133()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_125()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_126()) {
    jj_scanpos = xsp;
    if (jj_3_127()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_167()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_49()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_102()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_63()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_132()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_86()
 {
    if (jj_3R_104()) return true;
    return false;
  }

  private boolean jj_3_123()
 {
    if (jj_3R_133()) return true;
    return false;
  }

  private boolean jj_3R_35()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(TYPES)) return true;
    return false;
  }

  private boolean jj_3R_168()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3_121()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_48()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_122()
 {
    if (jj_3R_132()) return true;
    return false;
  }

  private boolean jj_3_243()
 {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3_85()
 {
    if (jj_3R_103()) return true;
    return false;
  }

  private boolean jj_3_242()
 {
    if (jj_3R_207()) return true;
    return false;
  }

  private boolean jj_3_166()
 {
    if (jj_3R_168()) return true;
    return false;
  }

  private boolean jj_3R_127()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_121()) {
    jj_scanpos = xsp;
    if (jj_3_122()) {
    jj_scanpos = xsp;
    if (jj_3_123()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_84()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3_165()
 {
    if (jj_3R_167()) return true;
    return false;
  }

  private boolean jj_3_164()
 {
    if (jj_3R_166()) return true;
    return false;
  }

  private boolean jj_3R_62()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(OR)) return true;
    return false;
  }

  private boolean jj_3_241()
 {
    if (jj_3R_206()) return true;
    return false;
  }

  private boolean jj_3R_95()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_164()) {
    jj_scanpos = xsp;
    if (jj_3_165()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_166()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_240()
 {
    if (jj_3R_205()) return true;
    return false;
  }

  private boolean jj_3R_248()
 {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3_238()
 {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3_237()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3_83()
 {
    if (jj_3R_102()) return true;
    return false;
  }

  private boolean jj_3_239()
 {
    if (jj_scan_token(PARAMETERS)) return true;
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_240()
 {
    if (jj_3R_248()) return true;
    return false;
  }

  private boolean jj_3_82()
 {
    if (jj_3R_101()) return true;
    return false;
  }

  private boolean jj_3R_61()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_81()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_165()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_128()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_240()) jj_scanpos = xsp;
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3R_164()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private boolean jj_3_236()
 {
    if (jj_3R_204()) return true;
    return false;
  }

  private boolean jj_3R_99()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_236()) return true;
    return false;
  }

  private boolean jj_3R_70()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3_235()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_163()
 {
    if (jj_3R_165()) return true;
    return false;
  }

  private boolean jj_3_162()
 {
    if (jj_3R_164()) return true;
    return false;
  }

  private boolean jj_3_234()
 {
    if (jj_3R_203()) return true;
    return false;
  }

  private boolean jj_3_233()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_130()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3_80()
 {
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3_120()
 {
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3_78()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_69()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_79()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_98()) return true;
    if (jj_3R_99()) return true;
    return false;
  }

  private boolean jj_3R_129()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_96()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_79()) {
    jj_scanpos = xsp;
    if (jj_3_80()) return true;
    }
    return false;
  }

  private boolean jj_3_47()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3_46()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3R_67()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_46()) {
    jj_scanpos = xsp;
    if (jj_3_47()) return true;
    }
    return false;
  }

  private boolean jj_3_232()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_100()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_231()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_45()
 {
    if (jj_3R_68()) return true;
    return false;
  }

  private boolean jj_3R_97()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_225()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_44()
 {
    if (jj_3R_67()) return true;
    return false;
  }

  private boolean jj_3_43()
 {
    if (jj_3R_66()) return true;
    return false;
  }

  private boolean jj_3_42()
 {
    if (jj_3R_65()) return true;
    return false;
  }

  private boolean jj_3R_202()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(DIV)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_231()) {
    jj_scanpos = xsp;
    if (jj_3_232()) return true;
    }
    return false;
  }

  private boolean jj_3_41()
 {
    if (jj_3R_64()) return true;
    return false;
  }

  private boolean jj_3R_163()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private boolean jj_3_40()
 {
    if (jj_3R_63()) return true;
    return false;
  }

  private boolean jj_3_39()
 {
    if (jj_3R_62()) return true;
    return false;
  }

  private boolean jj_3R_131()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_38()
 {
    if (jj_3R_61()) return true;
    return false;
  }

  private boolean jj_3_77()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3_37()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3_230()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_76()
 {
    if (jj_3R_97()) return true;
    return false;
  }

  private boolean jj_3_119()
 {
    if (jj_3R_71()) return true;
    return false;
  }

  private boolean jj_3_229()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_118()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_117()
 {
    if (jj_3R_130()) return true;
    return false;
  }

  private boolean jj_3_116()
 {
    if (jj_3R_129()) return true;
    return false;
  }

  private boolean jj_3_226()
 {
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_115()
 {
    if (jj_3R_128()) return true;
    return false;
  }

  private boolean jj_3_75()
 {
    if (jj_3R_96()) return true;
    return false;
  }

  private boolean jj_3R_71()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_39()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.NEGATIVE_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_40()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DISJUNCTIVE_PRECONDITIONS)
                                && this.isRequirement(RequireKey.NEGATIVE_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_41()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.EXISTENTIAL_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_42()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_43()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.EQUALITY);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_44()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                        || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                        || this.isRequirement(RequireKey.OBJECT_FLUENTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_45()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_201()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(MUL)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_229()) {
    jj_scanpos = xsp;
    if (jj_3_230()) return true;
    }
    return false;
  }

  private boolean jj_3R_249()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_75()) {
    jj_scanpos = xsp;
    if (jj_3_76()) {
    jj_scanpos = xsp;
    if (jj_3_77()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_162()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3_227()
 {
    if (jj_3R_79()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_225()) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_94()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.PREFERENCES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_115()) {
    jj_scanpos = xsp;
    if (jj_3_116()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_117()) {
    jj_scanpos = xsp;
    if (jj_3_118()) {
    jj_scanpos = xsp;
    if (jj_3_119()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_226()) jj_scanpos = xsp;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_114()
 {
    if (jj_scan_token(EFFECT)) return true;
    if (jj_3R_127()) return true;
    return false;
  }

  private boolean jj_3R_58()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(HOLD_AFTER)) return true;
    return false;
  }

  private boolean jj_3R_200()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SUB)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_227()) {
    jj_scanpos = xsp;
    if (jj_3_228()) return true;
    }
    return false;
  }

  private boolean jj_3_113()
 {
    if (jj_scan_token(PRECONDITION)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_161()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_246()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3_224()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_223()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_90()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(ACTION)) return true;
    return false;
  }

  private boolean jj_3R_245()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_206()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_245()) {
    jj_scanpos = xsp;
    if (jj_3R_246()) return true;
    }
    return false;
  }

  private boolean jj_3R_199()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ADD)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_223()) {
    jj_scanpos = xsp;
    if (jj_3_224()) return true;
    }
    return false;
  }

  private boolean jj_3R_57()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(HOLD_DURING)) return true;
    return false;
  }

  private boolean jj_3R_160()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GREAT)) return true;
    return false;
  }

  private boolean jj_3_222()
 {
    if (jj_3R_202()) return true;
    return false;
  }

  private boolean jj_3_221()
 {
    if (jj_3R_201()) return true;
    return false;
  }

  private boolean jj_3_220()
 {
    if (jj_3R_200()) return true;
    return false;
  }

  private boolean jj_3_219()
 {
    if (jj_3R_199()) return true;
    return false;
  }

  private boolean jj_3R_244()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(43)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_197()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_219()) {
    jj_scanpos = xsp;
    if (jj_3_220()) {
    jj_scanpos = xsp;
    if (jj_3_221()) {
    jj_scanpos = xsp;
    if (jj_3_222()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_56()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ALWAYS_WITHIN)) return true;
    return false;
  }

  private boolean jj_3_218()
 {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_159()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3_217()
 {
    if (jj_3R_198()) return true;
    return false;
  }

  private boolean jj_3_216()
 {
    if (jj_3R_197()) return true;
    return false;
  }

  private boolean jj_3R_243()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(44)) {
    jj_scanpos = xsp;
    if (jj_scan_token(45)) return true;
    }
    if (jj_3R_249()) return true;
    return false;
  }

  private boolean jj_3R_205()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_243()) {
    jj_scanpos = xsp;
    if (jj_3R_244()) return true;
    }
    return false;
  }

  private boolean jj_3R_87()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(ACTION)) return true;
    return false;
  }

  private boolean jj_3_161()
 {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3_74()
 {
    if (jj_scan_token(CONDITION)) return true;
    if (jj_3R_95()) return true;
    return false;
  }

  private boolean jj_3R_185()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_216()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_217()) {
    jj_scanpos = xsp;
    if (jj_3_218()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_215()
 {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3_214()
 {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3_213()
 {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3_156()
 {
    if (jj_3R_159()) return true;
    return false;
  }

  private boolean jj_3_160()
 {
    if (jj_3R_163()) return true;
    return false;
  }

  private boolean jj_3_212()
 {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3_211()
 {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3_159()
 {
    if (jj_3R_162()) return true;
    return false;
  }

  private boolean jj_3R_55()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SOMETIME_BEFORE)) return true;
    return false;
  }

  private boolean jj_3_158()
 {
    if (jj_3R_161()) return true;
    return false;
  }

  private boolean jj_3_157()
 {
    if (jj_3R_160()) return true;
    return false;
  }

  private boolean jj_3R_157()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_156()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_157()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_158()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_159()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_160()) {
    jj_scanpos = xsp;
    if (jj_3_161()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_193()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_211()) {
    jj_scanpos = xsp;
    if (jj_3_212()) {
    jj_scanpos = xsp;
    if (jj_3_213()) {
    jj_scanpos = xsp;
    if (jj_3_214()) {
    jj_scanpos = xsp;
    if (jj_3_215()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_93()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(DURATIVE_METHOD)) return true;
    return false;
  }

  private boolean jj_3_155()
 {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3R_89()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(DERIVED)) return true;
    return false;
  }

  private boolean jj_3R_196()
 {
    if (jj_scan_token(CONTINUOUS_VARIABLE)) return true;
    return false;
  }

  private boolean jj_3R_158()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_73()
 {
    if (jj_scan_token(PRECONDITION)) return true;
    if (jj_3R_94()) return true;
    return false;
  }

  private boolean jj_3R_54()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SOMETIME_AFTER)) return true;
    return false;
  }

  private boolean jj_3_210()
 {
    if (jj_3R_196()) return true;
    return false;
  }

  private boolean jj_3_154()
 {
    if (jj_3R_158()) return true;
    return false;
  }

  private boolean jj_3_153()
 {
    if (jj_3R_157()) return true;
    return false;
  }

  private boolean jj_3_152()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3R_34()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(REQUIREMENTS)) return true;
    return false;
  }

  private boolean jj_3R_126()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SOMETIME_AFTER)) return true;
    return false;
  }

  private boolean jj_3_209()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3_151()
 {
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_92()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(METHOD)) return true;
    return false;
  }

  private boolean jj_3R_53()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT_MOST_ONCE)) return true;
    return false;
  }

  private boolean jj_3_150()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3_208()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3_14()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_13()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_125()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SOMETIME_BEFORE)) return true;
    return false;
  }

  private boolean jj_3_12()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_11()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_10()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_9()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_8()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_52()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(WITHIN)) return true;
    return false;
  }

  private boolean jj_3_72()
 {
    if (jj_3R_93()) return true;
    return false;
  }

  private boolean jj_3R_198()
 {
    if (jj_scan_token(VAR_DURATION)) return true;
    return false;
  }

  private boolean jj_3_71()
 {
    if (jj_3R_92()) return true;
    return false;
  }

  private boolean jj_3R_124()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SOMETIME)) return true;
    return false;
  }

  private boolean jj_3_68()
 {
    if (jj_3R_89()) return true;
    return false;
  }

  private boolean jj_3_70()
 {
    if (jj_3R_91()) return true;
    return false;
  }

  private boolean jj_3R_195()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(DECREASE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_67()
 {
    if (jj_3R_88()) return true;
    return false;
  }

  private boolean jj_3_69()
 {
    if (jj_3R_90()) return true;
    return false;
  }

  private boolean jj_3_7()
 {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3_6()
 {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3_66()
 {
    if (jj_3R_87()) return true;
    return false;
  }

  private boolean jj_3R_51()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SOMETIME)) return true;
    return false;
  }

  private boolean jj_3R_154()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private boolean jj_3_5()
 {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3_4()
 {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_3()
 {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3_2()
 {
    if (jj_3R_35()) return true;
    return false;
  }

  private boolean jj_3_1()
 {
    if (jj_3R_34()) return true;
    return false;
  }

  private boolean jj_3R_40()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_66()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATIVE_ACTIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_67()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DERIVED_PREDICATES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_68()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.HIERARCHY);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_69()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.HIERARCHY);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_70()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.HIERARCHY);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_71()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATIVE_ACTIONS) // ADD HDDL2.1
                && this.isRequirement(RequireKey.HIERARCHY);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_72()) return true;
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_123()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT_MOST_ONCE)) return true;
    return false;
  }

  private boolean jj_3R_194()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(INCREASE)) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_268()
 {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3_207()
 {
    if (jj_3R_195()) return true;
    return false;
  }

  private boolean jj_3_206()
 {
    if (jj_3R_194()) return true;
    return false;
  }

  private boolean jj_3R_50()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ALWAYS)) return true;
    return false;
  }

  private boolean jj_3R_153()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_233()
 {
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_224()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(MUL)) return true;
    return false;
  }

  private boolean jj_3R_188()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_206()) {
    jj_scanpos = xsp;
    if (jj_3_207()) return true;
    }
    return false;
  }

  private boolean jj_3_65()
 {
    if (jj_3R_86()) return true;
    return false;
  }

  private boolean jj_3R_122()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ALWAYS)) return true;
    return false;
  }

  private boolean jj_3R_41()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_49()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3R_232()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_228()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_65()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_79()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_232()) {
    jj_scanpos = xsp;
    if (jj_3R_233()) return true;
    }
    return false;
  }

  private boolean jj_3R_42()
 {
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_192()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_152()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_225()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(DIV)) return true;
    return false;
  }

  private boolean jj_3R_121()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3_149()
 {
    if (jj_3R_154()) return true;
    return false;
  }

  private boolean jj_3_148()
 {
    if (jj_3R_153()) return true;
    return false;
  }

  private boolean jj_3_147()
 {
    if (jj_3R_152()) return true;
    return false;
  }

  private boolean jj_3R_81()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3R_191()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    if (jj_3R_242()) return true;
    return false;
  }

  private boolean jj_3R_148()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_147()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_148()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.DURATION_INEQUALITIES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_149()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_120()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3_205()
 {
    if (jj_3R_134()) return true;
    return false;
  }

  private boolean jj_3R_48()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3_204()
 {
    if (jj_3R_135()) return true;
    return false;
  }

  private boolean jj_3R_223()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3_203()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3_202()
 {
    if (jj_3R_193()) return true;
    return false;
  }

  private boolean jj_3_267()
 {
    if (jj_3R_226()) return true;
    return false;
  }

  private boolean jj_3R_242()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_202()) {
    jj_scanpos = xsp;
    if (jj_3_203()) {
    jj_scanpos = xsp;
    if (jj_3_204()) {
    jj_scanpos = xsp;
    if (jj_3_205()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_151()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_85()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3_36()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3_201()
 {
    if (jj_3R_192()) return true;
    return false;
  }

  private boolean jj_3_200()
 {
    if (jj_3R_191()) return true;
    return false;
  }

  private boolean jj_3R_119()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(HOLD_DURING)) return true;
    return false;
  }

  private boolean jj_3R_222()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ADD)) return true;
    return false;
  }

  private boolean jj_3R_47()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_187()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_200()) {
    jj_scanpos = xsp;
    if (jj_3_201()) return true;
    }
    return false;
  }

  private boolean jj_3_266()
 {
    if (jj_3R_225()) return true;
    return false;
  }

  private boolean jj_3R_150()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private boolean jj_3_35()
 {
    if (jj_3R_58()) return true;
    return false;
  }

  private boolean jj_3_265()
 {
    if (jj_3R_224()) return true;
    return false;
  }

  private boolean jj_3_34()
 {
    if (jj_3R_57()) return true;
    return false;
  }

  private boolean jj_3_264()
 {
    if (jj_3R_223()) return true;
    return false;
  }

  private boolean jj_3_33()
 {
    if (jj_3R_56()) return true;
    return false;
  }

  private boolean jj_3_263()
 {
    if (jj_3R_222()) return true;
    return false;
  }

  private boolean jj_3_32()
 {
    if (jj_3R_55()) return true;
    return false;
  }

  private boolean jj_3R_84()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(MUL)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3_31()
 {
    if (jj_3R_54()) return true;
    return false;
  }

  private boolean jj_3_30()
 {
    if (jj_3R_53()) return true;
    return false;
  }

  private boolean jj_3_146()
 {
    if (jj_3R_151()) return true;
    return false;
  }

  private boolean jj_3_29()
 {
    if (jj_3R_52()) return true;
    return false;
  }

  private boolean jj_3_145()
 {
    if (jj_3R_150()) return true;
    return false;
  }

  private boolean jj_3_28()
 {
    if (jj_3R_51()) return true;
    return false;
  }

  private boolean jj_3_27()
 {
    if (jj_3R_50()) return true;
    return false;
  }

  private boolean jj_3_26()
 {
    if (jj_3R_49()) return true;
    return false;
  }

  private boolean jj_3R_217()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_263()) {
    jj_scanpos = xsp;
    if (jj_3_264()) {
    jj_scanpos = xsp;
    if (jj_3_265()) {
    jj_scanpos = xsp;
    if (jj_3_266()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_25()
 {
    if (jj_3R_48()) return true;
    return false;
  }

  private boolean jj_3R_190()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_118()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(HOLD_BETWEEN)) return true;
    return false;
  }

  private boolean jj_3_24()
 {
    if (jj_3R_47()) return true;
    return false;
  }

  private boolean jj_3R_149()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_145()) {
    jj_scanpos = xsp;
    if (jj_3_146()) return true;
    }
    return false;
  }

  private boolean jj_3_144()
 {
    if (jj_3R_149()) return true;
    return false;
  }

  private boolean jj_3_143()
 {
    if (jj_3R_148()) return true;
    return false;
  }

  private boolean jj_3R_59()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_24()) {
    jj_scanpos = xsp;
    if (jj_3_25()) {
    jj_scanpos = xsp;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) {
    jj_scanpos = xsp;
    if (jj_3_28()) {
    jj_scanpos = xsp;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) {
    jj_scanpos = xsp;
    if (jj_3_31()) {
    jj_scanpos = xsp;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) {
    jj_scanpos = xsp;
    if (jj_3_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_23()
 {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_83()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3_262()
 {
    if (jj_scan_token(TOTAL_TIME)) return true;
    return false;
  }

  private boolean jj_3R_147()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_143()) {
    jj_scanpos = xsp;
    if (jj_3_144()) return true;
    }
    return false;
  }

  private boolean jj_3R_189()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private boolean jj_3_261()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(TOTAL_TIME)) return true;
    if (jj_scan_token(RIGHT_BRACKET)) return true;
    return false;
  }

  private boolean jj_3R_219()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_261()) {
    jj_scanpos = xsp;
    if (jj_3_262()) return true;
    }
    return false;
  }

  private boolean jj_3R_117()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(HOLD_AFTER)) return true;
    return false;
  }

  private boolean jj_3_22()
 {
    if (jj_scan_token(NUMBER_TYPE)) return true;
    return false;
  }

  private boolean jj_3_142()
 {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3_199()
 {
    if (jj_3R_190()) return true;
    return false;
  }

  private boolean jj_3_198()
 {
    if (jj_3R_189()) return true;
    return false;
  }

  private boolean jj_3_260()
 {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3R_146()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_141()
 {
    if (jj_3R_147()) return true;
    return false;
  }

  private boolean jj_3R_82()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_156()) return true;
    return false;
  }

  private boolean jj_3_140()
 {
    if (jj_3R_146()) return true;
    return false;
  }

  private boolean jj_3_197()
 {
    if (jj_3R_188()) return true;
    return false;
  }

  private boolean jj_3R_116()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(HOLD_BEFORE)) return true;
    return false;
  }

  private boolean jj_3_139()
 {
    if (jj_3R_131()) return true;
    return false;
  }

  private boolean jj_3_196()
 {
    if (jj_3R_187()) return true;
    return false;
  }

  private boolean jj_3R_218()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3_64()
 {
    if (jj_3R_85()) return true;
    return false;
  }

  private boolean jj_3_63()
 {
    if (jj_3R_84()) return true;
    return false;
  }

  private boolean jj_3_62()
 {
    if (jj_3R_83()) return true;
    return false;
  }

  private boolean jj_3R_176()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_196()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.CONTINOUS_EFFECTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_197()) return true;
    }
    return false;
  }

  private boolean jj_3_61()
 {
    if (jj_3R_82()) return true;
    return false;
  }

  private boolean jj_3_112()
 {
    if (jj_3R_126()) return true;
    return false;
  }

  private boolean jj_3_111()
 {
    if (jj_3R_125()) return true;
    return false;
  }

  private boolean jj_3_195()
 {
    if (jj_3R_186()) return true;
    return false;
  }

  private boolean jj_3_110()
 {
    if (jj_3R_124()) return true;
    return false;
  }

  private boolean jj_3R_80()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_61()) {
    jj_scanpos = xsp;
    if (jj_3_62()) {
    jj_scanpos = xsp;
    if (jj_3_63()) {
    jj_scanpos = xsp;
    if (jj_3_64()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_109()
 {
    if (jj_3R_123()) return true;
    return false;
  }

  private boolean jj_3_21()
 {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3_60()
 {
    if (jj_3R_81()) return true;
    return false;
  }

  private boolean jj_3_108()
 {
    if (jj_3R_122()) return true;
    return false;
  }

  private boolean jj_3_59()
 {
    if (jj_3R_80()) return true;
    return false;
  }

  private boolean jj_3R_220()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(IS_VIOLATED)) return true;
    return false;
  }

  private boolean jj_3_107()
 {
    if (jj_3R_121()) return true;
    return false;
  }

  private boolean jj_3_106()
 {
    if (jj_3R_120()) return true;
    return false;
  }

  private boolean jj_3R_175()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_105()
 {
    if (jj_3R_119()) return true;
    return false;
  }

  private boolean jj_3_99()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_259()
 {
    if (jj_3R_220()) return true;
    return false;
  }

  private boolean jj_3_104()
 {
    if (jj_3R_118()) return true;
    return false;
  }

  private boolean jj_3_258()
 {
    if (jj_3R_219()) return true;
    return false;
  }

  private boolean jj_3R_78()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_59()) {
    jj_scanpos = xsp;
    if (jj_3_60()) return true;
    }
    return false;
  }

  private boolean jj_3_257()
 {
    if (jj_3R_218()) return true;
    return false;
  }

  private boolean jj_3_103()
 {
    if (jj_3R_117()) return true;
    return false;
  }

  private boolean jj_3_256()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3_255()
 {
    if (jj_3R_217()) return true;
    return false;
  }

  private boolean jj_3_102()
 {
    if (jj_3R_116()) return true;
    return false;
  }

  private boolean jj_3_101()
 {
    if (jj_3R_69()) return true;
    return false;
  }

  private boolean jj_3_100()
 {
    if (jj_3R_70()) return true;
    return false;
  }

  private boolean jj_3R_226()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_255()) {
    jj_scanpos = xsp;
    if (jj_3_256()) {
    jj_scanpos = xsp;
    if (jj_3_257()) {
    jj_scanpos = xsp;
    if (jj_3_258()) {
    jj_scanpos = xsp;
    if (jj_3_259()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_228()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(111)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_114()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_100()) {
    jj_scanpos = xsp;
    if (jj_3_101()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_102()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_103()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_104()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_105()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_106()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_107()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_108()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_109()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_110()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_111()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.METHOD_CONSTRAINTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_112()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_155()
 {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  private boolean jj_3R_88()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(DURATIVE_ACTION)) return true;
    return false;
  }

  private boolean jj_3R_177()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3_58()
 {
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_57()
 {
    if (jj_3R_78()) return true;
    return false;
  }

  private boolean jj_3R_241()
 {
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_115()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3R_216()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(METRIC)) return true;
    if (jj_scan_token(MINIMIZE)) return true;
    return false;
  }

  private boolean jj_3R_45()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_228()) return true;
    return false;
  }

  private boolean jj_3R_156()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_241()) {
    jj_scanpos = xsp;
    if (jj_3_57()) {
    jj_scanpos = xsp;
    if (jj_3_58()) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_178()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(WHEN)) return true;
    return false;
  }

  private boolean jj_3_98()
 {
    if (jj_3R_115()) return true;
    return false;
  }

  private boolean jj_3R_145()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(DECREASE)) return true;
    return false;
  }

  private boolean jj_3_97()
 {
    if (jj_3R_114()) return true;
    return false;
  }

  private boolean jj_3_96()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_215()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(METRIC)) return true;
    if (jj_scan_token(MAXIMIZE)) return true;
    return false;
  }

  private boolean jj_3_194()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_193()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_254()
 {
    if (jj_3R_216()) return true;
    return false;
  }

  private boolean jj_3R_38()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(FUNCTIONS)) return true;
    return false;
  }

  private boolean jj_3_253()
 {
    if (jj_3R_215()) return true;
    return false;
  }

  private boolean jj_3R_77()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_184()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(DECREASE)) return true;
    return false;
  }

  private boolean jj_3R_247()
 {
    if (jj_scan_token(VARIABLE_SYMBOL)) return true;
    return false;
  }

  private boolean jj_3R_144()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  private boolean jj_3R_113()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(END)) return true;
    return false;
  }

  private boolean jj_3R_204()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_253()) {
    jj_scanpos = xsp;
    if (jj_3_254()) return true;
    }
    return false;
  }

  private boolean jj_3_192()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_191()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_74()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LESS)) return true;
    return false;
  }

  private boolean jj_3R_227()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_183()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  private boolean jj_3R_112()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private boolean jj_3R_143()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SCALE_DOWN)) return true;
    return false;
  }

  private boolean jj_3R_212()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3_95()
 {
    if (jj_3R_113()) return true;
    return false;
  }

  private boolean jj_3_190()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_189()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_94()
 {
    if (jj_3R_112()) return true;
    return false;
  }

  private boolean jj_3R_239()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_94()) {
    jj_scanpos = xsp;
    if (jj_3_95()) return true;
    }
    return false;
  }

  private boolean jj_3R_44()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3R_76()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_182()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SCALE_DOWN)) return true;
    return false;
  }

  private boolean jj_3R_142()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SCALE_UP)) return true;
    return false;
  }

  private boolean jj_3R_238()
 {
    if (jj_3R_98()) return true;
    return false;
  }

  private boolean jj_3R_213()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(PREFERENCE)) return true;
    return false;
  }

  private boolean jj_3_188()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3R_236()
 {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3_187()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3R_98()
 {
    if (jj_scan_token(SYMBOL)) return true;
    return false;
  }

  private boolean jj_3_252()
 {
    if (jj_3R_214()) return true;
    return false;
  }

  private boolean jj_3R_181()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(SCALE_UP)) return true;
    return false;
  }

  private boolean jj_3R_75()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GEQUAL)) return true;
    return false;
  }

  private boolean jj_3R_141()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3R_211()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_186()
 {
    if (jj_3R_185()) return true;
    if (jj_3R_79()) return true;
    return false;
  }

  private boolean jj_3_185()
 {
    if (jj_3R_79()) return true;
    if (jj_3R_185()) return true;
    return false;
  }

  private boolean jj_3_138()
 {
    if (jj_3R_145()) return true;
    return false;
  }

  private boolean jj_3_137()
 {
    if (jj_3R_144()) return true;
    return false;
  }

  private boolean jj_3_136()
 {
    if (jj_3R_143()) return true;
    return false;
  }

  private boolean jj_3_251()
 {
    if (jj_3R_59()) return true;
    return false;
  }

  private boolean jj_3R_111()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_106()) return true;
    return false;
  }

  private boolean jj_3_135()
 {
    if (jj_3R_142()) return true;
    return false;
  }

  private boolean jj_3_134()
 {
    if (jj_3R_141()) return true;
    return false;
  }

  private boolean jj_3_250()
 {
    if (jj_3R_213()) return true;
    return false;
  }

  private boolean jj_3_20()
 {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3_249()
 {
    if (jj_3R_212()) return true;
    return false;
  }

  private boolean jj_3R_180()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  private boolean jj_3_248()
 {
    if (jj_3R_211()) return true;
    return false;
  }

  private boolean jj_3R_73()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GREAT)) return true;
    return false;
  }

  private boolean jj_3R_138()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_134()) {
    jj_scanpos = xsp;
    if (jj_3_135()) {
    jj_scanpos = xsp;
    if (jj_3_136()) {
    jj_scanpos = xsp;
    if (jj_3_137()) {
    jj_scanpos = xsp;
    if (jj_3_138()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_91()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(TASK)) return true;
    return false;
  }

  private boolean jj_3_184()
 {
    if (jj_3R_184()) return true;
    return false;
  }

  private boolean jj_3_183()
 {
    if (jj_3R_183()) return true;
    return false;
  }

  private boolean jj_3_182()
 {
    if (jj_3R_182()) return true;
    return false;
  }

  private boolean jj_3_181()
 {
    if (jj_3R_181()) return true;
    return false;
  }

  private boolean jj_3R_214()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_248()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.UNIVERSAL_PRECONDITIONS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_249()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.PREFERENCES);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_250()) {
    jj_scanpos = xsp;
    if (jj_3_251()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3_56()
 {
    if (jj_3R_77()) return true;
    return false;
  }

  private boolean jj_3_180()
 {
    if (jj_3R_180()) return true;
    return false;
  }

  private boolean jj_3_55()
 {
    if (jj_3R_76()) return true;
    return false;
  }

  private boolean jj_3_54()
 {
    if (jj_3R_75()) return true;
    return false;
  }

  private boolean jj_3_53()
 {
    if (jj_3R_74()) return true;
    return false;
  }

  private boolean jj_3_52()
 {
    if (jj_3R_73()) return true;
    return false;
  }

  private boolean jj_3R_110()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GEQUAL)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_179()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_180()) {
    jj_scanpos = xsp;
    if (jj_3_181()) {
    jj_scanpos = xsp;
    if (jj_3_182()) {
    jj_scanpos = xsp;
    if (jj_3_183()) {
    jj_scanpos = xsp;
    if (jj_3_184()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_37()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(PREDICATES)) return true;
    return false;
  }

  private boolean jj_3R_231()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_52()) {
    jj_scanpos = xsp;
    if (jj_3_53()) {
    jj_scanpos = xsp;
    if (jj_3_54()) {
    jj_scanpos = xsp;
    if (jj_3_55()) {
    jj_scanpos = xsp;
    if (jj_3_56()) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_179()
 {
    if (jj_3R_179()) return true;
    return false;
  }

  private boolean jj_3_178()
 {
    if (jj_3R_178()) return true;
    return false;
  }

  private boolean jj_3_177()
 {
    if (jj_3R_177()) return true;
    return false;
  }

  private boolean jj_3_176()
 {
    if (jj_3R_176()) return true;
    return false;
  }

  private boolean jj_3R_39()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(CONSTRAINTS)) return true;
    return false;
  }

  private boolean jj_3R_68()
 {
    if (jj_3R_231()) return true;
    return false;
  }

  private boolean jj_3R_221()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(121)) {
    jj_scanpos = xsp;
    if (jj_scan_token(105)) {
    jj_scanpos = xsp;
    if (jj_scan_token(107)) {
    jj_scanpos = xsp;
    if (jj_scan_token(106)) {
    jj_scanpos = xsp;
    if (jj_scan_token(108)) return true;
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3_175()
 {
    if (jj_3R_175()) return true;
    return false;
  }

  private boolean jj_3R_109()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(GREAT)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3_174()
 {
    if (jj_3R_100()) return true;
    return false;
  }

  private boolean jj_3R_186()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_174()) {
    jj_scanpos = xsp;
    if (jj_3_175()) {
    jj_scanpos = xsp;
    if (jj_3_176()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_177()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.CONDITIONAL_EFFECTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_178()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                        || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                        || this.isRequirement(RequireKey.OBJECT_FLUENTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_179()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_72()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(NOT)) return true;
    return false;
  }

  private boolean jj_3R_108()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LEQUAL)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3_51()
 {
    if (jj_3R_72()) return true;
    return false;
  }

  private boolean jj_3R_36()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(CONSTANTS)) return true;
    return false;
  }

  private boolean jj_3_50()
 {
    if (jj_3R_60()) return true;
    return false;
  }

  private boolean jj_3R_139()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(INCREASE)) return true;
    return false;
  }

  private boolean jj_3R_174()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    return false;
  }

  private boolean jj_3R_140()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_50()) {
    jj_scanpos = xsp;
    if (jj_3_51()) return true;
    }
    return false;
  }

  private boolean jj_3_133()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3_130()
 {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3R_235()
 {
    if (jj_3R_247()) return true;
    return false;
  }

  private boolean jj_3R_234()
 {
    if (jj_3R_221()) return true;
    return false;
  }

  private boolean jj_3_131()
 {
    if (jj_3R_138()) return true;
    return false;
  }

  private boolean jj_3R_207()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(GOAL)) return true;
    return false;
  }

  private boolean jj_3_132()
 {
    if (jj_3R_139()) return true;
    return false;
  }

  private boolean jj_3R_230()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_107()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_86()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_234()) {
    jj_scanpos = xsp;
    if (jj_3R_235()) return true;
    }
    return false;
  }

  private boolean jj_3_19()
 {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_173()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_scan_token(START)) return true;
    return false;
  }

  private boolean jj_3R_43()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(119)) {
    jj_scanpos = xsp;
    if (jj_scan_token(118)) {
    jj_scanpos = xsp;
    if (jj_scan_token(121)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_229()
 {
    if (jj_3R_41()) return true;
    if (jj_scan_token(EITHER)) return true;
    return false;
  }

  private boolean jj_3R_136()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                        || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                        || this.isRequirement(RequireKey.OBJECT_FLUENTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_131()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.ACTION_COSTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_132()) {
    jj_scanpos = xsp;
    if (jj_3_133()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_173()
 {
    if (jj_3R_174()) return true;
    return false;
  }

  private boolean jj_3_172()
 {
    if (jj_3R_173()) return true;
    return false;
  }

  private boolean jj_3R_209()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AT)) return true;
    if (jj_3R_155()) return true;
    return false;
  }

  private boolean jj_3R_46()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_229()) {
    jj_scanpos = xsp;
    if (jj_3R_230()) return true;
    }
    return false;
  }

  private boolean jj_3R_171()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_172()) {
    jj_scanpos = xsp;
    if (jj_3_173()) return true;
    }
    return false;
  }

  private boolean jj_3R_106()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EQUAL)) return true;
    if (jj_3R_239()) return true;
    return false;
  }

  private boolean jj_3R_137()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(AND)) return true;
    return false;
  }

  private boolean jj_3_17()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_60()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_3R_227()) return true;
    return false;
  }

  private boolean jj_3_129()
 {
    if (jj_3R_136()) return true;
    return false;
  }

  private boolean jj_3_128()
 {
    if (jj_3R_137()) return true;
    return false;
  }

  private boolean jj_3R_210()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(EQUAL)) return true;
    return false;
  }

  private boolean jj_3R_172()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(OVER)) return true;
    return false;
  }

  private boolean jj_3R_105()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_238()) return true;
    return false;
  }

  private boolean jj_3_171()
 {
    if (jj_3R_172()) return true;
    return false;
  }

  private boolean jj_3_247()
 {
    if (jj_3R_210()) return true;
    return false;
  }

  private boolean jj_3_170()
 {
    if (jj_3R_171()) return true;
    return false;
  }

  private boolean jj_3_246()
 {
    if (jj_3R_140()) return true;
    return false;
  }

  private boolean jj_3_245()
 {
    if (jj_3R_209()) return true;
    return false;
  }

  private boolean jj_3_16()
 {
    if (jj_scan_token(SUB)) return true;
    return false;
  }

  private boolean jj_3R_169()
 {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_170()) {
    jj_scanpos = xsp;
    if (jj_3_171()) return true;
    }
    return false;
  }

  private boolean jj_3_244()
 {
    if (jj_3R_208()) return true;
    return false;
  }

  private boolean jj_3R_66()
 {
    if (jj_scan_token(LEFT_BRACKET)) return true;
    if (jj_scan_token(FORALL)) return true;
    return false;
  }

  private boolean jj_3R_208()
 {
    Token xsp;
    xsp = jj_scanpos;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.TIMED_INITIAL_LITERALS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_245()) {
    jj_scanpos = xsp;
    if (jj_3_246()) {
    jj_scanpos = xsp;
    jj_lookingAhead = true;
    jj_semLA = this.isRequirement(RequireKey.FLUENTS)
                        || this.isRequirement(RequireKey.NUMERIC_FLUENTS)
                        || this.isRequirement(RequireKey.OBJECT_FLUENTS)
                        || this.isRequirement(RequireKey.ACTION_COSTS);
    jj_lookingAhead = false;
    if (!jj_semLA || jj_3_247()) return true;
    }
    }
    return false;
  }

  private boolean jj_3_93()
 {
    if (jj_3R_111()) return true;
    return false;
  }

  private boolean jj_3_92()
 {
    if (jj_3R_110()) return true;
    return false;
  }

  /** Generated Token Manager. */
  public LexerTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[40];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0x0,0x0,0x2000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2000,0x2000,0x0,0x2000,0x2000,0x0,0x2000,0x0,0x2000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0xffff0000,0xffff0000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3000,0x4000,0x0,0xc00,0x0,0x3c00,0x3000,0x4000,0x0,0xc00,0x0,0x3c00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x37f,0x37f,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x8,0x0,0x8,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x2c00000,0x2001e00,0x1000000,0x2c00000,0x2c00000,0x2001e00,0x2001e00,0x2009e00,0x0,0x2001e00,0x3001e00,0x3001e00,0x4000000,0x2009e00,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x2001e00,0x3001e00,0x0,0x0,0x2000000,0x6009e00,0x80000,0x2000000,0x0,0x2000000,0x4004000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[268];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Lexer(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Lexer(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Lexer(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new LexerTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
      jj_input_stream = new SimpleCharStream(stream, 1, 1);
   } else {
      jj_input_stream.ReInit(stream, 1, 1);
   }
   if (token_source == null) {
      token_source = new LexerTokenManager(jj_input_stream);
   }

    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Lexer(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(LexerTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 40; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  @SuppressWarnings("serial")
  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) {
       return;
    }

    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];

      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }

      for (int[] oldentry : jj_expentries) {
        if (oldentry.length == jj_expentry.length) {
          boolean isMatched = true;

          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              isMatched = false;
              break;
            }

          }
          if (isMatched) {
            jj_expentries.add(jj_expentry);
            break;
          }
        }
      }

      if (pos != 0) {
        jj_lasttokens[(jj_endpos = pos) - 1] = kind;
      }
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[126];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 40; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 126; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 268; i++) {
      try {
        JJCalls p = jj_2_rtns[i];

        do {
          if (p.gen > jj_gen) {
            jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
            switch (i) {
              case 0: jj_3_1(); break;
              case 1: jj_3_2(); break;
              case 2: jj_3_3(); break;
              case 3: jj_3_4(); break;
              case 4: jj_3_5(); break;
              case 5: jj_3_6(); break;
              case 6: jj_3_7(); break;
              case 7: jj_3_8(); break;
              case 8: jj_3_9(); break;
              case 9: jj_3_10(); break;
              case 10: jj_3_11(); break;
              case 11: jj_3_12(); break;
              case 12: jj_3_13(); break;
              case 13: jj_3_14(); break;
              case 14: jj_3_15(); break;
              case 15: jj_3_16(); break;
              case 16: jj_3_17(); break;
              case 17: jj_3_18(); break;
              case 18: jj_3_19(); break;
              case 19: jj_3_20(); break;
              case 20: jj_3_21(); break;
              case 21: jj_3_22(); break;
              case 22: jj_3_23(); break;
              case 23: jj_3_24(); break;
              case 24: jj_3_25(); break;
              case 25: jj_3_26(); break;
              case 26: jj_3_27(); break;
              case 27: jj_3_28(); break;
              case 28: jj_3_29(); break;
              case 29: jj_3_30(); break;
              case 30: jj_3_31(); break;
              case 31: jj_3_32(); break;
              case 32: jj_3_33(); break;
              case 33: jj_3_34(); break;
              case 34: jj_3_35(); break;
              case 35: jj_3_36(); break;
              case 36: jj_3_37(); break;
              case 37: jj_3_38(); break;
              case 38: jj_3_39(); break;
              case 39: jj_3_40(); break;
              case 40: jj_3_41(); break;
              case 41: jj_3_42(); break;
              case 42: jj_3_43(); break;
              case 43: jj_3_44(); break;
              case 44: jj_3_45(); break;
              case 45: jj_3_46(); break;
              case 46: jj_3_47(); break;
              case 47: jj_3_48(); break;
              case 48: jj_3_49(); break;
              case 49: jj_3_50(); break;
              case 50: jj_3_51(); break;
              case 51: jj_3_52(); break;
              case 52: jj_3_53(); break;
              case 53: jj_3_54(); break;
              case 54: jj_3_55(); break;
              case 55: jj_3_56(); break;
              case 56: jj_3_57(); break;
              case 57: jj_3_58(); break;
              case 58: jj_3_59(); break;
              case 59: jj_3_60(); break;
              case 60: jj_3_61(); break;
              case 61: jj_3_62(); break;
              case 62: jj_3_63(); break;
              case 63: jj_3_64(); break;
              case 64: jj_3_65(); break;
              case 65: jj_3_66(); break;
              case 66: jj_3_67(); break;
              case 67: jj_3_68(); break;
              case 68: jj_3_69(); break;
              case 69: jj_3_70(); break;
              case 70: jj_3_71(); break;
              case 71: jj_3_72(); break;
              case 72: jj_3_73(); break;
              case 73: jj_3_74(); break;
              case 74: jj_3_75(); break;
              case 75: jj_3_76(); break;
              case 76: jj_3_77(); break;
              case 77: jj_3_78(); break;
              case 78: jj_3_79(); break;
              case 79: jj_3_80(); break;
              case 80: jj_3_81(); break;
              case 81: jj_3_82(); break;
              case 82: jj_3_83(); break;
              case 83: jj_3_84(); break;
              case 84: jj_3_85(); break;
              case 85: jj_3_86(); break;
              case 86: jj_3_87(); break;
              case 87: jj_3_88(); break;
              case 88: jj_3_89(); break;
              case 89: jj_3_90(); break;
              case 90: jj_3_91(); break;
              case 91: jj_3_92(); break;
              case 92: jj_3_93(); break;
              case 93: jj_3_94(); break;
              case 94: jj_3_95(); break;
              case 95: jj_3_96(); break;
              case 96: jj_3_97(); break;
              case 97: jj_3_98(); break;
              case 98: jj_3_99(); break;
              case 99: jj_3_100(); break;
              case 100: jj_3_101(); break;
              case 101: jj_3_102(); break;
              case 102: jj_3_103(); break;
              case 103: jj_3_104(); break;
              case 104: jj_3_105(); break;
              case 105: jj_3_106(); break;
              case 106: jj_3_107(); break;
              case 107: jj_3_108(); break;
              case 108: jj_3_109(); break;
              case 109: jj_3_110(); break;
              case 110: jj_3_111(); break;
              case 111: jj_3_112(); break;
              case 112: jj_3_113(); break;
              case 113: jj_3_114(); break;
              case 114: jj_3_115(); break;
              case 115: jj_3_116(); break;
              case 116: jj_3_117(); break;
              case 117: jj_3_118(); break;
              case 118: jj_3_119(); break;
              case 119: jj_3_120(); break;
              case 120: jj_3_121(); break;
              case 121: jj_3_122(); break;
              case 122: jj_3_123(); break;
              case 123: jj_3_124(); break;
              case 124: jj_3_125(); break;
              case 125: jj_3_126(); break;
              case 126: jj_3_127(); break;
              case 127: jj_3_128(); break;
              case 128: jj_3_129(); break;
              case 129: jj_3_130(); break;
              case 130: jj_3_131(); break;
              case 131: jj_3_132(); break;
              case 132: jj_3_133(); break;
              case 133: jj_3_134(); break;
              case 134: jj_3_135(); break;
              case 135: jj_3_136(); break;
              case 136: jj_3_137(); break;
              case 137: jj_3_138(); break;
              case 138: jj_3_139(); break;
              case 139: jj_3_140(); break;
              case 140: jj_3_141(); break;
              case 141: jj_3_142(); break;
              case 142: jj_3_143(); break;
              case 143: jj_3_144(); break;
              case 144: jj_3_145(); break;
              case 145: jj_3_146(); break;
              case 146: jj_3_147(); break;
              case 147: jj_3_148(); break;
              case 148: jj_3_149(); break;
              case 149: jj_3_150(); break;
              case 150: jj_3_151(); break;
              case 151: jj_3_152(); break;
              case 152: jj_3_153(); break;
              case 153: jj_3_154(); break;
              case 154: jj_3_155(); break;
              case 155: jj_3_156(); break;
              case 156: jj_3_157(); break;
              case 157: jj_3_158(); break;
              case 158: jj_3_159(); break;
              case 159: jj_3_160(); break;
              case 160: jj_3_161(); break;
              case 161: jj_3_162(); break;
              case 162: jj_3_163(); break;
              case 163: jj_3_164(); break;
              case 164: jj_3_165(); break;
              case 165: jj_3_166(); break;
              case 166: jj_3_167(); break;
              case 167: jj_3_168(); break;
              case 168: jj_3_169(); break;
              case 169: jj_3_170(); break;
              case 170: jj_3_171(); break;
              case 171: jj_3_172(); break;
              case 172: jj_3_173(); break;
              case 173: jj_3_174(); break;
              case 174: jj_3_175(); break;
              case 175: jj_3_176(); break;
              case 176: jj_3_177(); break;
              case 177: jj_3_178(); break;
              case 178: jj_3_179(); break;
              case 179: jj_3_180(); break;
              case 180: jj_3_181(); break;
              case 181: jj_3_182(); break;
              case 182: jj_3_183(); break;
              case 183: jj_3_184(); break;
              case 184: jj_3_185(); break;
              case 185: jj_3_186(); break;
              case 186: jj_3_187(); break;
              case 187: jj_3_188(); break;
              case 188: jj_3_189(); break;
              case 189: jj_3_190(); break;
              case 190: jj_3_191(); break;
              case 191: jj_3_192(); break;
              case 192: jj_3_193(); break;
              case 193: jj_3_194(); break;
              case 194: jj_3_195(); break;
              case 195: jj_3_196(); break;
              case 196: jj_3_197(); break;
              case 197: jj_3_198(); break;
              case 198: jj_3_199(); break;
              case 199: jj_3_200(); break;
              case 200: jj_3_201(); break;
              case 201: jj_3_202(); break;
              case 202: jj_3_203(); break;
              case 203: jj_3_204(); break;
              case 204: jj_3_205(); break;
              case 205: jj_3_206(); break;
              case 206: jj_3_207(); break;
              case 207: jj_3_208(); break;
              case 208: jj_3_209(); break;
              case 209: jj_3_210(); break;
              case 210: jj_3_211(); break;
              case 211: jj_3_212(); break;
              case 212: jj_3_213(); break;
              case 213: jj_3_214(); break;
              case 214: jj_3_215(); break;
              case 215: jj_3_216(); break;
              case 216: jj_3_217(); break;
              case 217: jj_3_218(); break;
              case 218: jj_3_219(); break;
              case 219: jj_3_220(); break;
              case 220: jj_3_221(); break;
              case 221: jj_3_222(); break;
              case 222: jj_3_223(); break;
              case 223: jj_3_224(); break;
              case 224: jj_3_225(); break;
              case 225: jj_3_226(); break;
              case 226: jj_3_227(); break;
              case 227: jj_3_228(); break;
              case 228: jj_3_229(); break;
              case 229: jj_3_230(); break;
              case 230: jj_3_231(); break;
              case 231: jj_3_232(); break;
              case 232: jj_3_233(); break;
              case 233: jj_3_234(); break;
              case 234: jj_3_235(); break;
              case 235: jj_3_236(); break;
              case 236: jj_3_237(); break;
              case 237: jj_3_238(); break;
              case 238: jj_3_239(); break;
              case 239: jj_3_240(); break;
              case 240: jj_3_241(); break;
              case 241: jj_3_242(); break;
              case 242: jj_3_243(); break;
              case 243: jj_3_244(); break;
              case 244: jj_3_245(); break;
              case 245: jj_3_246(); break;
              case 246: jj_3_247(); break;
              case 247: jj_3_248(); break;
              case 248: jj_3_249(); break;
              case 249: jj_3_250(); break;
              case 250: jj_3_251(); break;
              case 251: jj_3_252(); break;
              case 252: jj_3_253(); break;
              case 253: jj_3_254(); break;
              case 254: jj_3_255(); break;
              case 255: jj_3_256(); break;
              case 256: jj_3_257(); break;
              case 257: jj_3_258(); break;
              case 258: jj_3_259(); break;
              case 259: jj_3_260(); break;
              case 260: jj_3_261(); break;
              case 261: jj_3_262(); break;
              case 262: jj_3_263(); break;
              case 263: jj_3_264(); break;
              case 264: jj_3_265(); break;
              case 265: jj_3_266(); break;
              case 266: jj_3_267(); break;
              case 267: jj_3_268(); break;
            }
          }
          p = p.next;
        } while (p != null);

        } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }

    p.gen = jj_gen + xla - jj_la; 
    p.first = token;
    p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
