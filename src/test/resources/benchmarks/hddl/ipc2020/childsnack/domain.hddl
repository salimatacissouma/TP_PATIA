;;
;; Copyright (c) 2020 by Damien Pellier <Damien.Pellier@imag.fr>.
;;
;; This file is part of PDDL4J library.
;;
;; PDDL4J is free software: you can redistribute it and/or modify
;; it under the terms of the GNU General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; PDDL4J is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU General Public License for more details.
;;
;; You should have received a copy of the GNU General Public License
;; along with PDDL4J.  If not, see <http://www.gnu.org/licenses/>
;;

(define (domain childsnack)

    (:requirements
       :strips
       :typing
       :hierarchy
       :method-preconditions
       :negative-preconditions
       :equality
    )

    (:types child bread-portion content-portion sandwich tray place - object)

    (:constants kitchen - place)

    (:predicates
     	(at_kitchen_bread ?b - bread-portion)
	    (at_kitchen_content ?c - content-portion)
     	(at_kitchen_sandwich ?s - sandwich)
     	(no_gluten_bread ?b - bread-portion)
        (no_gluten_content ?c - content-portion)
        (ontray ?s - sandwich ?t - tray)
        (no_gluten_sandwich ?s - sandwich)
        (allergic_gluten ?c - child)
        (not_allergic_gluten ?c - child)
        (served ?c - child)
        (waiting ?c - child ?p - place)
        (at ?t - tray ?p - place)
        (not_exist ?s - sandwich)
    )

    (:task serve
        :parameters (?c - child)
    )


    (:action make_sandwich_no_gluten
	    :parameters (?s - sandwich ?b - bread-portion ?c - content-portion)
	    :precondition (and
	        (at_kitchen_bread ?b)
			(at_kitchen_content ?c)
			(no_gluten_bread ?b)
			(no_gluten_content ?c)
			(not_exist ?s)
		)
	    :effect (and
		   (not (at_kitchen_bread ?b))
		   (not (at_kitchen_content ?c))
		   (at_kitchen_sandwich ?s)
		   (no_gluten_sandwich ?s)
           (not (not_exist ?s))
        )
    )

    (:action make_sandwich
	    :parameters (?s - sandwich ?b - bread-portion ?c - content-portion)
	    :precondition (and
	        (at_kitchen_bread ?b)
			(at_kitchen_content ?c)
            (not_exist ?s)
		)
	    :effect (and
		    (not (at_kitchen_bread ?b))
		    (not (at_kitchen_content ?c))
		     (at_kitchen_sandwich ?s)
             (not (not_exist ?s))
        )
    )

    (:action put_on_tray
	    :parameters (?s - sandwich ?t - tray)
	    :precondition (and
	        (at_kitchen_sandwich ?s)
			(at ?t kitchen)
		)
	    :effect (and
		   (not (at_kitchen_sandwich ?s))
		   (ontray ?s ?t)
		)
	)

    (:action serve_sandwich_no_gluten
 	    :parameters (?s - sandwich ?c - child ?t - tray ?p - place)
	    :precondition (and
		    (allergic_gluten ?c)
		    (ontray ?s ?t)
		    (waiting ?c ?p)
		    (no_gluten_sandwich ?s)
            (at ?t ?p)
		)
	    :effect (and
		    (not (ontray ?s ?t))
		    (served ?c)
		)
    )

    (:action serve_sandwich
	    :parameters (?s - sandwich ?c - child ?t - tray ?p - place)
	    :precondition (and
	        (not_allergic_gluten ?c)
	        (waiting ?c ?p)
			(ontray ?s ?t)
			(at ?t ?p)
	    )
	    :effect (and
	        (not (ontray ?s ?t))
		    (served ?c)
		)
	)

    (:action move_tray
	    :parameters (?t - tray ?p1 ?p2 - place)
	    :precondition (and
	        (at ?t ?p1)
	    )
	    :effect (and
	        (not (at ?t ?p1))
		    (at ?t ?p2)
		)
	)

    (:method serve_0
		:parameters	(?c - child ?s - sandwich ?p2 - place ?t - tray ?b - bread-portion ?cont - content-portion)
		:task (serve ?c)
		:precondition (and
		    (allergic_gluten ?c)
		    (not_exist ?s)
		    (waiting ?c ?p2)
		    (no_gluten_bread ?b)
		    (no_gluten_content ?cont)
		)
		:ordered-subtasks (and
            (make_sandwich_no_gluten ?s ?b ?cont)
            (put_on_tray ?s ?t)
			(move_tray ?t kitchen ?p2)
			(serve_sandwich_no_gluten ?s ?c ?t ?p2)
			(move_tray ?t ?p2 kitchen)
	    )
	)

    (:method serve_1
		:parameters	(?c - child ?s - sandwich ?p2 - place ?t - tray ?b - bread-portion ?cont - content-portion)
		:task (serve ?c)
		:precondition (and
		    (not_allergic_gluten ?c)
		    (not_exist ?s)
		    (waiting ?c ?p2)
		    (not (no_gluten_bread ?b))
		    (not (no_gluten_content ?cont))
		)
		:ordered-subtasks (and
            (make_sandwich ?s ?b ?cont)
			(put_on_tray ?s ?t)
			(move_tray ?t kitchen ?p2)
			(serve_sandwich ?s ?c ?t ?p2)
			(move_tray ?t ?p2 kitchen)
		)
    )
)
